{
  "address": "0x9bE634797af98cB560DB23260b5f7C6e98AcCAcf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "R",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "T",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minGandalfTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "buyGandalfToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActualTickLower",
      "outputs": [
        {
          "internalType": "int24",
          "name": "actualTickLower",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActualTickUpper",
      "outputs": [
        {
          "internalType": "int24",
          "name": "actualTickUpper",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getAmountOutMinimum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPriceTick",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPriceTickRounded",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDesiredReserveAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDesiredTickLower",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDesiredTickRange",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDesiredTickUpper",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "getEstimatedTokenOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeDenominator",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGandalfPoolFeeNumerator",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGandalfTokenPriceInToken0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGandalfTokenPriceInToken1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIfLiquidityPositionNeedsUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "tickRange",
          "type": "uint24"
        }
      ],
      "name": "getIsTickRangeValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityPositionLiquidityAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "liquidityAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityPositionTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityPositionValueInToken0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNewDesiredTicks",
      "outputs": [
        {
          "internalType": "int24",
          "name": "newDesiredTickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "newDesiredTickUpper",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceInActualLiquidityRange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "priceInLiquidityRange",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceInDesiredLiquidityRange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "priceInLiquidityRange",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserveValueInToken0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSlippageDenominator",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSqrtPriceX96",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTickSpacing",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gandalfTokenAmountSold",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "receiveInToken0",
          "type": "bool"
        }
      ],
      "name": "getTokenAmountToReceiveFromSell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxTokenAmountToReceive",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getTokensSorted",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1_",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValueInToken0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValueInToken1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapV3FactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapV3PoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapV3PoolFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapV3PoolSlippageNumerator",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapV3PositionManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapV3SwapRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "uniswapV3FactoryAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswapV3SwapRouterAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniswapV3PositionManagerAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB_",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "uniswapV3PoolSlippageNumerator_",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "uniswapV3PoolFee_",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "desiredTickRange_",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "gandalfPoolFeeNumerator_",
          "type": "uint24"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gandalfTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTokenAmountToReceive",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "receiveInToken0",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "sellGandalfToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "desiredTickRange_",
          "type": "uint24"
        }
      ],
      "name": "setDesiredTickRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "gandalfPoolFeeNumerator_",
          "type": "uint24"
        }
      ],
      "name": "setGandalfPoolFeeNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "uniswapV3PoolSlippageNumerator_",
          "type": "uint24"
        }
      ],
      "name": "setUniswapV3PoolSlippageNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb480261a3f3cea84711b75b1eb3c5bd7e540d17034eba6033419ffd1f587ffd9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9bE634797af98cB560DB23260b5f7C6e98AcCAcf",
    "transactionIndex": 0,
    "gasUsed": "3722994",
    "logsBloom": "0x
    "blockHash": "0x8ffd93d0fdcbf67a7aea3f41dc6c39ccff39f22b9bc1918e6e43f0a5703bd857",
    "transactionHash": "0xb480261a3f3cea84711b75b1eb3c5bd7e540d17034eba6033419ffd1f587ffd9",
    "logs": [],
    "blockNumber": 20477015,
    "cumulativeGasUsed": "3722994",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f5fc3f9f0ccb637c90cd40a3c2a53810",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"R\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"T\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minGandalfTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyGandalfToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActualTickLower\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"actualTickLower\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActualTickUpper\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"actualTickUpper\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceTickRounded\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDesiredReserveAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDesiredTickLower\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDesiredTickRange\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDesiredTickUpper\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getEstimatedTokenOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDenominator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGandalfPoolFeeNumerator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGandalfTokenPriceInToken0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGandalfTokenPriceInToken1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIfLiquidityPositionNeedsUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"tickRange\",\"type\":\"uint24\"}],\"name\":\"getIsTickRangeValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityPositionLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityPositionTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityPositionValueInToken0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewDesiredTicks\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"newDesiredTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"newDesiredTickUpper\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceInActualLiquidityRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"priceInLiquidityRange\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceInDesiredLiquidityRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"priceInLiquidityRange\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveValueInToken0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlippageDenominator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSqrtPriceX96\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gandalfTokenAmountSold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveInToken0\",\"type\":\"bool\"}],\"name\":\"getTokenAmountToReceiveFromSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokenAmountToReceive\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getTokensSorted\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueInToken0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueInToken1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV3FactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV3PoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV3PoolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV3PoolSlippageNumerator\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV3PositionManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV3SwapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"uniswapV3FactoryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapV3SwapRouterAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapV3PositionManagerAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB_\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"uniswapV3PoolSlippageNumerator_\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"uniswapV3PoolFee_\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"desiredTickRange_\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"gandalfPoolFeeNumerator_\",\"type\":\"uint24\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gandalfTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenAmountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"receiveInToken0\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"sellGandalfToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"desiredTickRange_\",\"type\":\"uint24\"}],\"name\":\"setDesiredTickRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"gandalfPoolFeeNumerator_\",\"type\":\"uint24\"}],\"name\":\"setGandalfPoolFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"uniswapV3PoolSlippageNumerator_\",\"type\":\"uint24\"}],\"name\":\"setUniswapV3PoolSlippageNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"buyGandalfToken(uint256,uint256,uint256,uint256)\":{\"params\":{\"deadline\":\"The timestamp at which the transaction will expire\",\"minGandalfTokenAmount\":\"The minimum amount of the Gandalf token the user is willing to receive\",\"token0Amount\":\"The amount of token 0 the user wants to spend to buy the Gandalf token\",\"token1Amount\":\"The amount of token 1 the user wants to spend to buy the Gandalf token\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"getActualTickLower()\":{\"returns\":{\"actualTickLower\":\"The actual tick lower of the current liquidity position\"}},\"getActualTickUpper()\":{\"returns\":{\"actualTickUpper\":\"The actual tick upper of the current liquidity position\"}},\"getAmountOutMinimum(address,address,uint256)\":{\"params\":{\"amountIn\":\"The amount of tokenIn being swapped\",\"tokenIn\":\"The address of the token being swapped\",\"tokenOut\":\"The address of the token being swapped for\"},\"returns\":{\"amountOutMinimum\":\"The minimum amount of tokenOut to use for the swap\"}},\"getCurrentPriceTick()\":{\"returns\":{\"_0\":\"The tick of the current price\"}},\"getCurrentPriceTickRounded()\":{\"returns\":{\"_0\":\"The current price tick rounded\"}},\"getDesiredReserveAmounts()\":{\"params\":{\"token0Amount\":\"The desired amount of token0\",\"token1Amount\":\"The desired amount of token1\"}},\"getDesiredTickLower()\":{\"returns\":{\"_0\":\"The desired tick lower\"}},\"getDesiredTickRange()\":{\"returns\":{\"_0\":\"The desired tick range\"}},\"getDesiredTickUpper()\":{\"returns\":{\"_0\":\"The desired tick upper\"}},\"getEstimatedTokenOut(address,address,uint256,uint24)\":{\"params\":{\"amountIn\":\"The amount of tokenIn being swapped\",\"fee\":\"The fee to apply to the estimated swap\",\"tokenIn\":\"The address of the token being swapped\",\"tokenOut\":\"The address of the token being swapped for\"},\"returns\":{\"amountOut\":\"The estimated amount of tokenOut that will be received from the swap\"}},\"getFeeDenominator()\":{\"returns\":{\"_0\":\"The fee denominator constant\"}},\"getGandalfPoolFeeNumerator()\":{\"returns\":{\"_0\":\"The Gandalf Pool Fee Numerator\"}},\"getGandalfTokenPriceInToken0()\":{\"returns\":{\"_0\":\"The price in token 0 scaled by 10^18\"}},\"getGandalfTokenPriceInToken1()\":{\"returns\":{\"_0\":\"The price in token 1 scaled by 10^18\"}},\"getIfLiquidityPositionNeedsUpdate()\":{\"returns\":{\"_0\":\"bool Indicates whether the liquidity position needs to be updated\"}},\"getLiquidityPositionLiquidityAmount()\":{\"returns\":{\"liquidityAmount\":\"The liquidity amount of the current liquidity position\"}},\"getLiquidityPositionTokenId()\":{\"returns\":{\"_0\":\"The token ID of the current liquidity position\"}},\"getLiquidityPositionValueInToken0()\":{\"returns\":{\"_0\":\"The liquidity position value relative to token0    \"}},\"getNewDesiredTicks()\":{\"returns\":{\"newDesiredTickLower\":\"The new tick lower desired for the liquidity position\",\"newDesiredTickUpper\":\"The new tick upper desired for the liquidity position\"}},\"getPriceInActualLiquidityRange()\":{\"returns\":{\"priceInLiquidityRange\":\"Returns true if the current price is within the liquidity position range\"}},\"getPriceInDesiredLiquidityRange()\":{\"returns\":{\"priceInLiquidityRange\":\"Returns true if the current price within the desired liquidity position range\"}},\"getReserveValueInToken0()\":{\"returns\":{\"_0\":\"The reserve value relative to token0\"}},\"getSlippageDenominator()\":{\"returns\":{\"_0\":\"The slippage denominator\"}},\"getSqrtPriceX96()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the Uniswap pool\"}},\"getTickSpacing()\":{\"returns\":{\"_0\":\"The pool tick spacing\"}},\"getToken0()\":{\"returns\":{\"_0\":\"The token 0 address\"}},\"getToken1()\":{\"returns\":{\"_0\":\"The token 1 address\"}},\"getTokenAmountToReceiveFromSell(uint256,bool)\":{\"params\":{\"gandalfTokenAmountSold\":\"The amount of Gandalf Token being sold\",\"receiveInToken0\":\"Boolean indicating whether the user wants to receive token0 or token1\"},\"returns\":{\"maxTokenAmountToReceive\":\"The max amount of the token the user could receive from sell\"}},\"getTokensSorted(address,address)\":{\"params\":{\"tokenA\":\"The address of the first unsorted token\",\"tokenB\":\"The address of the second unsorted token\"},\"returns\":{\"token0_\":\"The address of the sorted token 0\",\"token1_\":\"The address of the sorted token 1\"}},\"getTotalValueInToken0()\":{\"returns\":{\"_0\":\"The total value relative to token0\"}},\"getTotalValueInToken1()\":{\"returns\":{\"_0\":\"The total value relative to token0\"}},\"getUniswapV3FactoryAddress()\":{\"returns\":{\"_0\":\"The Uniswap v3 Factory Address\"}},\"getUniswapV3PoolAddress()\":{\"returns\":{\"_0\":\"The Uniswap v3 Pool Address\"}},\"getUniswapV3PoolFee()\":{\"returns\":{\"_0\":\"The Uniswap pool fee\"}},\"getUniswapV3PoolSlippageNumerator()\":{\"returns\":{\"_0\":\"The Uniswap Pool Slippage Numerator   \"}},\"getUniswapV3PositionManagerAddress()\":{\"returns\":{\"_0\":\"The Uniswap v3 Position Manager Address\"}},\"getUniswapV3SwapRouterAddress()\":{\"returns\":{\"_0\":\"The Uniswap v3 Swap Router Address\"}},\"initialize(address,string,string,address,address,address,address,address,uint24,uint24,uint24,uint24)\":{\"params\":{\"desiredTickRange_\":\"The initial range in ticks of the liquidity range\",\"gandalfPoolFeeNumerator_\":\"The fee numerator applied to all buys and sells of the gandalf token\",\"name_\":\"The name of this contract's ERC-20 token \",\"owner_\":\"The address that ownership of the contract gets transferred to\",\"symbol_\":\"The symbol of this contract's ERC-20 token\",\"tokenA_\":\"The address of the unsorted token A of the Uniswap pool liquidity is being provided to\",\"tokenB_\":\"The address of the unsorted token B of the Uniswap pool liquidity is being provided to\",\"uniswapV3FactoryAddress_\":\"The address of the Uniswap v3 Factory contract\",\"uniswapV3PoolFee_\":\"The fee of the Uniswap pool liquidity is being provided to\",\"uniswapV3PoolSlippageNumerator_\":\"The numerator of the maximum amount of slippage to allow for swaps\",\"uniswapV3PositionManagerAddress_\":\"The address of the Uniswap v3 Position Manager contract\",\"uniswapV3SwapRouterAddress_\":\"The address of the Uniswap v3 Swap Router contract\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sellGandalfToken(uint256,uint256,bool,uint256)\":{\"params\":{\"deadline\":\"The timestamp at which the transaction will expire\",\"gandalfTokenAmount\":\"The amount of Gandalf token the user wants to sell\",\"minTokenAmountToReceive\":\"The minimum amount of token0 or token1 the user is willing to receive\",\"receiveInToken0\":\"Boolean indicating whether the user wants to receive token0 or token1\"}},\"setDesiredTickRange(uint24)\":{\"params\":{\"desiredTickRange_\":\"The new Desired Tick Range\"}},\"setGandalfPoolFeeNumerator(uint24)\":{\"params\":{\"gandalfPoolFeeNumerator_\":\"The new Gandalf Pool Fee Numerator\"}},\"setUniswapV3PoolSlippageNumerator(uint24)\":{\"params\":{\"uniswapV3PoolSlippageNumerator_\":\"The new Uniswap v3 Pool Slippage Numerator\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyGandalfToken(uint256,uint256,uint256,uint256)\":{\"notice\":\"Allows the user to buy gandalf token using any amount of token0 and token1The Amount of gandalf token the user receives represents their share of the liquidity position\"},\"getActualTickLower()\":{\"notice\":\"Returns the actual tick lower of the current liquidity position\"},\"getActualTickUpper()\":{\"notice\":\"Returns the actual tick upper of the current liquidity position\"},\"getAmountOutMinimum(address,address,uint256)\":{\"notice\":\"Gets the amount out minimum to use for a swap, according to the configured allowable slippage numerator\"},\"getCurrentPriceTick()\":{\"notice\":\"Returns the current price of the Uniswap pool represented as a tick\"},\"getCurrentPriceTickRounded()\":{\"notice\":\"Gets the current price represented as a tick, rounded according to the tick spacing\"},\"getDesiredReserveAmounts()\":{\"notice\":\"Returns the desired reserve amounts of token0 and token1 that are neededto add the maximum amount of liquidity to the current liquidity position\"},\"getDesiredTickLower()\":{\"notice\":\"Returns the desired tick lower\"},\"getDesiredTickRange()\":{\"notice\":\"Returns the desired tick range\"},\"getDesiredTickUpper()\":{\"notice\":\"Returns the desired tick upper\"},\"getEstimatedTokenOut(address,address,uint256,uint24)\":{\"notice\":\"Gets the estimated token amount out from a swap. This calculation takes into accountthe pool fee, but assumes that no slippage occurs\"},\"getFeeDenominator()\":{\"notice\":\"Returns the fee denominator constant\"},\"getGandalfPoolFeeNumerator()\":{\"notice\":\"Returns the Gandalf pool fee numerator, that gets divided by FEE_DENOMINATORto calculate the fee percentage\"},\"getGandalfTokenPriceInToken0()\":{\"notice\":\"Returns the price of the Gandalf token relative to token 0 scaled by 10^18\"},\"getGandalfTokenPriceInToken1()\":{\"notice\":\"Returns the price of the Gandalf token relative to token 1 scaled by 10^18\"},\"getIfLiquidityPositionNeedsUpdate()\":{\"notice\":\"Returns whether the liquidity position needs an updateThis can return true when the price has moved outside of the current liquidity position range,or when the desired tick range has been updated by the owner\"},\"getIsTickRangeValid(uint24)\":{\"notice\":\"Returns whether the specified tick range is valid. For the tick range to be valid, it needs to be evenlydivisible by the tick spacing, and be greater than or equal to (tickSpacing * 2)\"},\"getLiquidityPositionLiquidityAmount()\":{\"notice\":\"Returns the total liquidity amount held by the current liquidity position\"},\"getLiquidityPositionTokenId()\":{\"notice\":\"Returns the token ID of the current liquidity position\"},\"getLiquidityPositionValueInToken0()\":{\"notice\":\"Gets the value of token0 and token1 held by the liquidity position in terms of token0 value\"},\"getNewDesiredTicks()\":{\"notice\":\"Gets the desired tickLower and tickUpper based on the current price and the desiredTickRange\"},\"getPriceInActualLiquidityRange()\":{\"notice\":\"Returns whether the current Uniswap pool price is within the liquidity position range\"},\"getPriceInDesiredLiquidityRange()\":{\"notice\":\"Returns whether the current Uniswap pool price within the desired liquidity position range\"},\"getReserveValueInToken0()\":{\"notice\":\"Gets the value of token0 and token1 held by this contract in terms of token0 value\"},\"getSlippageDenominator()\":{\"notice\":\"Returns the slippage denominator used for calculating the allowable slippage percentage\"},\"getSqrtPriceX96()\":{\"notice\":\"Returns the current sqrtPriceX96 of the Uniswap pool\"},\"getTickSpacing()\":{\"notice\":\"Gets the tick spacing of the Uniswap pool\"},\"getToken0()\":{\"notice\":\"Returns the address of token 0 of the Uniswap pool\"},\"getToken1()\":{\"notice\":\"Returns the address of token 1 of the Uniswap pool\"},\"getTokenAmountToReceiveFromSell(uint256,bool)\":{\"notice\":\"Gets the estimated amount of token0 or token1 user will receive when sellingthe specified amount of Gandalf Token\"},\"getTokensSorted(address,address)\":{\"notice\":\"Takes the address of two unsorted tokens and returns the tokens sorted for use with Uniswap v3\"},\"getTotalValueInToken0()\":{\"notice\":\"Gets the total value (reserves + liquidity position) in terms of token 0 value\"},\"getTotalValueInToken1()\":{\"notice\":\"Gets the total value (reserves + liquidity position) in terms of token 0 value\"},\"getUniswapV3FactoryAddress()\":{\"notice\":\"Returns the address of the Uniswap v3 Factory Address\"},\"getUniswapV3PoolAddress()\":{\"notice\":\"Returns the Uniswap v3 Pool Address\"},\"getUniswapV3PoolFee()\":{\"notice\":\"Returns the pool fee of the Uniswap pool liquidity is being provided to\"},\"getUniswapV3PoolSlippageNumerator()\":{\"notice\":\"Returns the Gandalf pool fee numerator, that gets divided by SLIPPAGE_DENOMINATORto calculate the slippage percentage\"},\"getUniswapV3PositionManagerAddress()\":{\"notice\":\"Returns the Uniswap v3 Position Manager Address\"},\"getUniswapV3SwapRouterAddress()\":{\"notice\":\"Returns the Uniswap v3 Swap Router Address\"},\"rebalance()\":{\"notice\":\"Rebalances the liquidity position by collecting fees, moving desired liquidity range ticks if needed,Making swaps between token0 and token1 if needed, and adding to liquidity position if funds are available\"},\"sellGandalfToken(uint256,uint256,bool,uint256)\":{\"notice\":\"Allows a user to sell their gandalf tokens for their share of the liquidity positionAnd receive either token0 or token1 in return\"},\"setDesiredTickRange(uint24)\":{\"notice\":\"Allows the owner to set a new Desired Tick Range\"},\"setGandalfPoolFeeNumerator(uint24)\":{\"notice\":\"Allows the owner to set a new Gandalf Pool Fee Numerator\"},\"setUniswapV3PoolSlippageNumerator(uint24)\":{\"notice\":\"Allows the owner to set a new Uniswap v3 Pool Slippage Numerator\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GandalfPool.sol\":\"GandalfPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/GandalfPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\n// Has been removed and replaced to utils\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n// Don't need SafeMath anymore since Solidity 0.8.0\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\n\\r\\n// Upgradeable contracts doesn't contain interfaces anymore\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\n\\r\\n// Has been removed and renamed\\r\\n// import \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\r\\n\\r\\n// Importing Solidity 0.8.0 for Uniswap libraries\\r\\n// import \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\r\\n// import \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\r\\nimport \\\"./uniswap/v3-core/FullMath.sol\\\";\\r\\nimport \\\"./uniswap/v3-core/TickMath.sol\\\";\\r\\nimport \\\"./uniswap/v3-periphery/INonfungiblePositionManager.sol\\\";\\r\\nimport \\\"./uniswap/v3-periphery/ISwapRouter.sol\\\";\\r\\nimport \\\"./uniswap/v3-periphery/LiquidityAmounts.sol\\\";\\r\\nimport \\\"./interfaces/IGandalfPool.sol\\\";\\r\\n\\r\\ncontract GandalfPool is\\r\\n    Initializable,\\r\\n    OwnableUpgradeable,\\r\\n    ERC20Upgradeable,\\r\\n    IGandalfPool\\r\\n{\\r\\n    // using ERC20Upgradeable for IERC20;\\r\\n    // using SafeMathUpgradeable for uint256;\\r\\n\\r\\n    uint24 private constant FEE_DENOMINATOR = 1_000_000;\\r\\n    uint24 private constant SLIPPAGE_DENOMINATOR = 1_000_000;\\r\\n    uint24 private uniswapV3PoolFee;\\r\\n    uint24 private gandalfPoolFeeNumerator;\\r\\n    uint24 private uniswapV3PoolSlippageNumerator;\\r\\n    uint24 private desiredTickRange;\\r\\n    int24 private desiredTickLower;\\r\\n    int24 private desiredTickUpper;\\r\\n    uint256 private liquidityPositionTokenId;\\r\\n    address private uniswapV3FactoryAddress;\\r\\n    address private uniswapV3SwapRouterAddress;\\r\\n    address private uniswapV3PositionManagerAddress;\\r\\n    address private uniswapV3PoolAddress;\\r\\n    address private token0;\\r\\n    address private token1;\\r\\n\\r\\n    modifier liquidityPositionMinted() {\\r\\n        require(liquidityPositionTokenId > 0, \\\"No liquidity position minted\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier nonZeroSupply() {\\r\\n        require(totalSupply() > 0, \\\"Supply must be greater than zero to calculate price\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========================================================================================= */\\r\\n    /*                                     External Functions                                    */\\r\\n    /* ========================================================================================= */\\r\\n\\r\\n    /// @param owner_ The address that ownership of the contract gets transferred to\\r\\n    /// @param name_ The name of this contract's ERC-20 token \\r\\n    /// @param symbol_ The symbol of this contract's ERC-20 token\\r\\n    /// @param uniswapV3FactoryAddress_ The address of the Uniswap v3 Factory contract\\r\\n    /// @param uniswapV3SwapRouterAddress_ The address of the Uniswap v3 Swap Router contract\\r\\n    /// @param uniswapV3PositionManagerAddress_ The address of the Uniswap v3 Position Manager contract\\r\\n    /// @param tokenA_ The address of the unsorted token A of the Uniswap pool liquidity is being provided to\\r\\n    /// @param tokenB_ The address of the unsorted token B of the Uniswap pool liquidity is being provided to\\r\\n    /// @param uniswapV3PoolSlippageNumerator_ The numerator of the maximum amount of slippage to allow for swaps\\r\\n    /// @param uniswapV3PoolFee_ The fee of the Uniswap pool liquidity is being provided to\\r\\n    /// @param desiredTickRange_ The initial range in ticks of the liquidity range\\r\\n    /// @param gandalfPoolFeeNumerator_ The fee numerator applied to all buys and sells of the gandalf token\\r\\n    function initialize(\\r\\n        address owner_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address uniswapV3FactoryAddress_,\\r\\n        address uniswapV3SwapRouterAddress_,\\r\\n        address uniswapV3PositionManagerAddress_,\\r\\n        address tokenA_,\\r\\n        address tokenB_,\\r\\n        uint24 uniswapV3PoolSlippageNumerator_,\\r\\n        uint24 uniswapV3PoolFee_,\\r\\n        uint24 desiredTickRange_,\\r\\n        uint24 gandalfPoolFeeNumerator_\\r\\n    ) external initializer {\\r\\n        __Ownable_init(owner_);\\r\\n        __ERC20_init(name_, symbol_);\\r\\n        transferOwnership(owner_);\\r\\n\\r\\n        uniswapV3PoolFee = uniswapV3PoolFee_;\\r\\n        uniswapV3PoolAddress = IUniswapV3Factory(uniswapV3FactoryAddress_).getPool(tokenA_, tokenB_, uniswapV3PoolFee_);\\r\\n\\r\\n        require(uniswapV3PoolAddress != address(0), \\\"Pool does not exist\\\");\\r\\n\\r\\n        _initializeUniswapAddresses(\\r\\n            uniswapV3FactoryAddress_,\\r\\n            uniswapV3SwapRouterAddress_,\\r\\n            uniswapV3PositionManagerAddress_\\r\\n        );\\r\\n        _setGandalfPoolFeeNumerator(gandalfPoolFeeNumerator_);\\r\\n        _setUniswapV3PoolSlippageNumerator(uniswapV3PoolSlippageNumerator_);\\r\\n        _setDesiredTickRange(desiredTickRange_);\\r\\n\\r\\n        (token0, token1) = getTokensSorted(tokenA_, tokenB_);\\r\\n\\r\\n        IERC20(token0).approve(uniswapV3SwapRouterAddress_, type(uint256).max);\\r\\n        IERC20(token0).approve(uniswapV3PositionManagerAddress_, type(uint256).max);\\r\\n        IERC20(token1).approve(uniswapV3SwapRouterAddress_, type(uint256).max);\\r\\n        IERC20(token1).approve(uniswapV3PositionManagerAddress_, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function _initializeUniswapAddresses(\\r\\n        address uniswapV3FactoryAddress_,\\r\\n        address uniswapV3SwapRouterAddress_,\\r\\n        address uniswapV3PositionManagerAddress_\\r\\n    ) internal {\\r\\n        uniswapV3FactoryAddress = uniswapV3FactoryAddress_;\\r\\n        uniswapV3SwapRouterAddress = uniswapV3SwapRouterAddress_;\\r\\n        uniswapV3PositionManagerAddress = uniswapV3PositionManagerAddress_;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows the user to buy gandalf token using any amount of token0 and token1\\r\\n    /// @notice The Amount of gandalf token the user receives represents their share of the liquidity position\\r\\n    /// @param token0Amount The amount of token 0 the user wants to spend to buy the Gandalf token\\r\\n    /// @param token1Amount The amount of token 1 the user wants to spend to buy the Gandalf token\\r\\n    /// @param minGandalfTokenAmount The minimum amount of the Gandalf token the user is willing to receive\\r\\n    /// @param deadline The timestamp at which the transaction will expire\\r\\n    function buyGandalfToken(uint256 token0Amount, uint256 token1Amount, uint256 minGandalfTokenAmount, uint256 deadline) external override {\\r\\n        require(token0Amount + token1Amount > 0, \\\"Sum of token amounts must be greater than zero\\\");\\r\\n        require(deadline >= block.timestamp, \\\"Transaction deadline expired\\\");\\r\\n\\r\\n        uint256 gandalfTokenAmountToReceive;\\r\\n        if(getTotalValueInToken0() > 0) {\\r\\n            uint256 totalValueInToken0Before = getTotalValueInToken0();\\r\\n\\r\\n            _transferTokensFromUser(token0Amount, token1Amount);\\r\\n            \\r\\n            uint256 totalValueInToken0After = getTotalValueInToken0();\\r\\n\\r\\n            gandalfTokenAmountToReceive = (totalValueInToken0After - totalValueInToken0Before) * totalSupply() * (FEE_DENOMINATOR - gandalfPoolFeeNumerator) / totalValueInToken0Before / FEE_DENOMINATOR;\\r\\n        } else {\\r\\n            _transferTokensFromUser(token0Amount, token1Amount);\\r\\n\\r\\n            gandalfTokenAmountToReceive = 1_000_000 * 10 ** decimals();\\r\\n        }\\r\\n\\r\\n        require(gandalfTokenAmountToReceive >= minGandalfTokenAmount, \\\"Minimum gandalf token amount cannot be met\\\");\\r\\n\\r\\n        _mint(msg.sender, gandalfTokenAmountToReceive);\\r\\n\\r\\n        _rebalance();\\r\\n    }\\r\\n\\r\\n    /// @notice Allows a user to sell their gandalf tokens for their share of the liquidity position\\r\\n    /// @notice And receive either token0 or token1 in return\\r\\n    /// @param gandalfTokenAmount The amount of Gandalf token the user wants to sell\\r\\n    /// @param minTokenAmountToReceive The minimum amount of token0 or token1 the user is willing to receive\\r\\n    /// @param receiveInToken0 Boolean indicating whether the user wants to receive token0 or token1\\r\\n    /// @param deadline The timestamp at which the transaction will expire\\r\\n    function sellGandalfToken(uint256 gandalfTokenAmount, uint256 minTokenAmountToReceive, bool receiveInToken0, uint256 deadline) external override {\\r\\n        require(deadline >= block.timestamp, \\\"Transaction deadline expired\\\");\\r\\n\\r\\n        uint256 tokenAmountToReceiveBeforeFee = getTokenAmountToReceiveFromSell(gandalfTokenAmount, receiveInToken0);\\r\\n        \\r\\n        uint128 decreaseLiquidityAmount = uint128(uint256(getLiquidityPositionLiquidityAmount()) * gandalfTokenAmount / totalSupply());\\r\\n\\r\\n        _decreaseLiquidityPosition(decreaseLiquidityAmount);\\r\\n\\r\\n        _collect();\\r\\n\\r\\n        (address tokenIn, address tokenOut) = receiveInToken0 ? (token1, token0) : (token0, token1);\\r\\n\\r\\n        _swapExactInput(tokenIn, tokenOut, IERC20(tokenIn).balanceOf(address(this)));\\r\\n\\r\\n        if(tokenAmountToReceiveBeforeFee > IERC20(tokenOut).balanceOf(address(this))) {\\r\\n            tokenAmountToReceiveBeforeFee = IERC20(tokenOut).balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        uint256 tokenAmountToReceiveAfterFee = tokenAmountToReceiveBeforeFee * (FEE_DENOMINATOR - gandalfPoolFeeNumerator) / FEE_DENOMINATOR;\\r\\n      \\r\\n        require(tokenAmountToReceiveAfterFee >= minTokenAmountToReceive, \\\"Minimum token amount cannot be met\\\");\\r\\n\\r\\n        IERC20(tokenOut).transfer(msg.sender, tokenAmountToReceiveAfterFee);\\r\\n\\r\\n        _burn(msg.sender, gandalfTokenAmount);\\r\\n\\r\\n        _rebalance();\\r\\n    }\\r\\n\\r\\n    /// @notice Rebalances the liquidity position by collecting fees, moving desired liquidity range ticks if needed,\\r\\n    /// @notice Making swaps between token0 and token1 if needed, and adding to liquidity position if funds are available\\r\\n    function rebalance() external override {\\r\\n        _rebalance();\\r\\n    }\\r\\n\\r\\n    /* ========================================================================================= */\\r\\n    /*                             External onlyOwner Functions                                  */\\r\\n    /* ========================================================================================= */\\r\\n\\r\\n    /// @notice Allows the owner to set a new Gandalf Pool Fee Numerator\\r\\n    /// @param gandalfPoolFeeNumerator_ The new Gandalf Pool Fee Numerator\\r\\n    function setGandalfPoolFeeNumerator(uint24 gandalfPoolFeeNumerator_) external override onlyOwner {\\r\\n        _setGandalfPoolFeeNumerator(gandalfPoolFeeNumerator_);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows the owner to set a new Uniswap v3 Pool Slippage Numerator\\r\\n    /// @param uniswapV3PoolSlippageNumerator_ The new Uniswap v3 Pool Slippage Numerator\\r\\n    function setUniswapV3PoolSlippageNumerator(uint24 uniswapV3PoolSlippageNumerator_) external override onlyOwner {\\r\\n        _setUniswapV3PoolSlippageNumerator(uniswapV3PoolSlippageNumerator_);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows the owner to set a new Desired Tick Range\\r\\n    /// @param desiredTickRange_ The new Desired Tick Range\\r\\n    function setDesiredTickRange(uint24 desiredTickRange_) external override onlyOwner {\\r\\n        _setDesiredTickRange(desiredTickRange_);\\r\\n    }\\r\\n\\r\\n    /* ========================================================================================= */\\r\\n    /*                                    Private Functions                                      */\\r\\n    /* ========================================================================================= */\\r\\n\\r\\n    /// @notice Transfers token0 and token1 amounts from user to this contract\\r\\n    /// @param token0Amount The amount of token0 to transfer from the user to this contract\\r\\n    /// @param token1Amount The amount of token1 to transfer from the user to this contract\\r\\n    function _transferTokensFromUser(uint256 token0Amount, uint256 token1Amount) private {\\r\\n        if(token0Amount > 0) {\\r\\n            IERC20(token0).transferFrom(msg.sender, address(this), token0Amount);\\r\\n        }\\r\\n\\r\\n        if(token1Amount > 0) {\\r\\n            IERC20(token1).transferFrom(msg.sender, address(this), token1Amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Sets a new Gandalf Pool Fee Numerator\\r\\n    /// @param gandalfPoolFeeNumerator_ The new Gandalf Pool Fee Numerator\\r\\n    function _setGandalfPoolFeeNumerator(uint24 gandalfPoolFeeNumerator_) private {\\r\\n        require(gandalfPoolFeeNumerator_ != gandalfPoolFeeNumerator, \\r\\n            \\\"Gandalf Pool Fee Numerator must be set to a new value\\\");\\r\\n        require(gandalfPoolFeeNumerator_ <= FEE_DENOMINATOR, \\r\\n            \\\"Gandalf Pool Fee Numerator must be less than FEE_DENOMINATOR\\\");\\r\\n\\r\\n        gandalfPoolFeeNumerator = gandalfPoolFeeNumerator_;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets a new Uniswap v3 Pool Slippage Numerator\\r\\n    /// @param uniswapV3PoolSlippageNumerator_ The new Uniswap v3 Pool Slippage Numerator\\r\\n    function _setUniswapV3PoolSlippageNumerator(uint24 uniswapV3PoolSlippageNumerator_) private {\\r\\n        require(uniswapV3PoolSlippageNumerator_ != uniswapV3PoolSlippageNumerator, \\r\\n            \\\"Uniswap v3 Pool Slippage Numerator must be set to a new value\\\");\\r\\n        require(uniswapV3PoolSlippageNumerator_ <= SLIPPAGE_DENOMINATOR, \\r\\n            \\\"uniswapV3PoolSlippageNumerator must be less than or equal to SLIPPAGE_DENOMINATOR\\\");\\r\\n\\r\\n        uniswapV3PoolSlippageNumerator = uniswapV3PoolSlippageNumerator_;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets a new Desired Tick Range\\r\\n    /// @param desiredTickRange_ The new Desired Tick Range\\r\\n    function _setDesiredTickRange(uint24 desiredTickRange_) private {\\r\\n        require(desiredTickRange_ != desiredTickRange, \\r\\n            \\\"Desired Tick Range must be set to a new value\\\");\\r\\n        require(getIsTickRangeValid(desiredTickRange_), \\\"Tick range is not valid\\\");\\r\\n\\r\\n        desiredTickRange = desiredTickRange_;\\r\\n        _moveDesiredTicks();\\r\\n    }   \\r\\n\\r\\n    /// @notice Calculates the desired amounts of token0 and token1 to add liquidity,\\r\\n    /// @notice then makes the necessary swaps and adds liquidity or mints a new position\\r\\n    function _makeSwapsAndAddLiquidity() private {\\r\\n        uint256 actualToken0Amount = IERC20(token0).balanceOf(address(this));\\r\\n        uint256 actualToken1Amount = IERC20(token1).balanceOf(address(this));\\r\\n\\r\\n        (uint256 desiredToken0Amount, uint256 desiredToken1Amount) = getDesiredReserveAmounts();\\r\\n\\r\\n        if(desiredToken0Amount > actualToken0Amount && desiredToken1Amount < actualToken1Amount) {\\r\\n            // Swap token1 for token0\\r\\n            _swapExactInput(token1, token0, actualToken1Amount - desiredToken1Amount);\\r\\n        } else if (desiredToken0Amount < actualToken0Amount && desiredToken1Amount > actualToken1Amount) {\\r\\n            // Swap token0 for token1\\r\\n            _swapExactInput(token0, token1, actualToken0Amount - desiredToken0Amount);\\r\\n        }\\r\\n\\r\\n        if(liquidityPositionTokenId > 0) {\\r\\n            _increaseLiquidityPosition();\\r\\n        } else {\\r\\n            _mintLiquidityPosition();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Mints a new liquidity position\\r\\n    function _mintLiquidityPosition() private {\\r\\n        INonfungiblePositionManager.MintParams memory mintParams;\\r\\n\\r\\n        mintParams.token0 = token0;\\r\\n        mintParams.token1 = token1;\\r\\n        mintParams.fee = uniswapV3PoolFee;\\r\\n        mintParams.tickLower = desiredTickLower;\\r\\n        mintParams.tickUpper = desiredTickUpper;\\r\\n        mintParams.amount0Desired = IERC20(token0).balanceOf(address(this));\\r\\n        mintParams.amount1Desired = IERC20(token1).balanceOf(address(this));\\r\\n        mintParams.amount0Min = 0;\\r\\n        mintParams.amount1Min = 0;\\r\\n        mintParams.recipient = address(this);\\r\\n        mintParams.deadline = block.timestamp;\\r\\n\\r\\n        (liquidityPositionTokenId,,,) = INonfungiblePositionManager(uniswapV3PositionManagerAddress).mint(mintParams);\\r\\n    }\\r\\n\\r\\n    /// @notice Increases liquidity on an existing liquidity position\\r\\n    function _increaseLiquidityPosition() private {\\r\\n        INonfungiblePositionManager.IncreaseLiquidityParams memory increaseLiquidityParams;\\r\\n\\r\\n        increaseLiquidityParams.tokenId = liquidityPositionTokenId;\\r\\n        increaseLiquidityParams.amount0Desired = IERC20(token0).balanceOf(address(this));\\r\\n        increaseLiquidityParams.amount1Desired = IERC20(token1).balanceOf(address(this));\\r\\n        increaseLiquidityParams.amount0Min = 0;\\r\\n        increaseLiquidityParams.amount1Min = 0;\\r\\n        increaseLiquidityParams.deadline = block.timestamp;\\r\\n\\r\\n        INonfungiblePositionManager(uniswapV3PositionManagerAddress).increaseLiquidity(increaseLiquidityParams);\\r\\n    }\\r\\n\\r\\n    /// @notice Decreases liquidity on an existing liquidity position\\r\\n    /// @param liquidityAmount The amount of liquidity to decrease the position by\\r\\n    function _decreaseLiquidityPosition(uint128 liquidityAmount) private {  \\r\\n        INonfungiblePositionManager.DecreaseLiquidityParams memory decreaseLiquidityParams;\\r\\n\\r\\n        decreaseLiquidityParams.tokenId = liquidityPositionTokenId;\\r\\n        decreaseLiquidityParams.liquidity = liquidityAmount;\\r\\n        decreaseLiquidityParams.amount0Min = 0;\\r\\n        decreaseLiquidityParams.amount1Min = 0;\\r\\n        decreaseLiquidityParams.deadline = block.timestamp; \\r\\n\\r\\n        INonfungiblePositionManager(uniswapV3PositionManagerAddress).decreaseLiquidity(decreaseLiquidityParams);\\r\\n    }\\r\\n\\r\\n    /// @notice Collects fees that have been earned from liquidity position\\r\\n    function _collect() private {\\r\\n        INonfungiblePositionManager.CollectParams memory collectParams;\\r\\n\\r\\n        collectParams.tokenId = liquidityPositionTokenId;\\r\\n        collectParams.recipient = address(this);\\r\\n        collectParams.amount0Max = type(uint128).max;\\r\\n        collectParams.amount1Max = type(uint128).max;\\r\\n\\r\\n        INonfungiblePositionManager(uniswapV3PositionManagerAddress).collect(collectParams);\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps an exact amount of tokenIn for tokenOut\\r\\n    /// @param tokenIn The address of the token being swapped\\r\\n    /// @param tokenOut The address of the token being swapped ford\\r\\n    /// @param amountIn The amount of tokenIn being swapped\\r\\n    function _swapExactInput(address tokenIn,address tokenOut, uint256 amountIn) private {\\r\\n        uint256 amountOutMinimum = getAmountOutMinimum(tokenIn, tokenOut, amountIn);\\r\\n\\r\\n        ISwapRouter.ExactInputSingleParams memory exactInputSingleParams;\\r\\n\\r\\n        exactInputSingleParams.tokenIn = tokenIn;\\r\\n        exactInputSingleParams.tokenOut = tokenOut;\\r\\n        exactInputSingleParams.fee = uniswapV3PoolFee;\\r\\n        exactInputSingleParams.recipient = address(this);\\r\\n        exactInputSingleParams.deadline = block.timestamp;\\r\\n        exactInputSingleParams.amountIn = amountIn;\\r\\n        exactInputSingleParams.amountOutMinimum = amountOutMinimum;\\r\\n        exactInputSingleParams.sqrtPriceLimitX96 = 0;\\r\\n\\r\\n        ISwapRouter(uniswapV3SwapRouterAddress).exactInputSingle(exactInputSingleParams);\\r\\n    }\\r\\n\\r\\n    /// @notice Rebalances the liquidity position by collecting fees, moving desired liquidity range ticks if needed,\\r\\n    /// @notice Making swaps between token0 and token1 if needed, and adding to liquidity position if funds are available\\r\\n    function _rebalance() private {\\r\\n        if(liquidityPositionTokenId > 0) {\\r\\n            _collect();\\r\\n\\r\\n            if(getIfLiquidityPositionNeedsUpdate()) {\\r\\n                _closeLiquidityPosition();\\r\\n                _moveDesiredTicks();\\r\\n            }\\r\\n        } else {\\r\\n            if(!getPriceInDesiredLiquidityRange()) {\\r\\n                _moveDesiredTicks();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(IERC20(token0).balanceOf(address(this)) > 0 || IERC20(token1).balanceOf(address(this)) > 0) {\\r\\n            _makeSwapsAndAddLiquidity();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Closes a liquidity position and collects all of token0 and token1 received,\\r\\n    /// @notice Then sets the liquidity position token ID back to zero\\r\\n    function _closeLiquidityPosition() private {\\r\\n        _decreaseLiquidityPosition(getLiquidityPositionLiquidityAmount());\\r\\n        _collect();\\r\\n        liquidityPositionTokenId = 0;\\r\\n    }\\r\\n\\r\\n    /// @notice Moves the desired ticks based upon the current price and the desired tick range\\r\\n    function _moveDesiredTicks() private {\\r\\n        (desiredTickLower, desiredTickUpper) = getNewDesiredTicks();\\r\\n    }\\r\\n\\r\\n    /* ========================================================================================= */\\r\\n    /*                             Public View & Public Pure Functions                           */\\r\\n    /* ========================================================================================= */\\r\\n\\r\\n    /// @notice Gets the estimated amount of token0 or token1 user will receive when selling\\r\\n    /// @notice the specified amount of Gandalf Token\\r\\n    /// @param gandalfTokenAmountSold The amount of Gandalf Token being sold\\r\\n    /// @param receiveInToken0 Boolean indicating whether the user wants to receive token0 or token1\\r\\n    /// @return maxTokenAmountToReceive The max amount of the token the user could receive from sell\\r\\n    function getTokenAmountToReceiveFromSell(uint256 gandalfTokenAmountSold, bool receiveInToken0) public view override returns (uint256 maxTokenAmountToReceive) {\\r\\n        if(receiveInToken0) {\\r\\n            maxTokenAmountToReceive = getTotalValueInToken0() * gandalfTokenAmountSold / totalSupply();\\r\\n        } else {\\r\\n            maxTokenAmountToReceive = getTotalValueInToken1() * gandalfTokenAmountSold / totalSupply();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the current price of the Uniswap pool represented as a tick\\r\\n    /// @return The tick of the current price\\r\\n    function getCurrentPriceTick() public view override returns (int24) {\\r\\n        return TickMath.getTickAtSqrtRatio(getSqrtPriceX96());\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the current price represented as a tick, rounded according to the tick spacing\\r\\n    /// @return The current price tick rounded\\r\\n    function getCurrentPriceTickRounded() public view override returns (int24) {\\r\\n        int24 currentPriceTick = getCurrentPriceTick();\\r\\n        return currentPriceTick - (currentPriceTick % getTickSpacing());\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the tick spacing of the Uniswap pool\\r\\n    /// @return The pool tick spacing\\r\\n    function getTickSpacing() public view override returns (int24) {\\r\\n        return IUniswapV3Factory(uniswapV3FactoryAddress).feeAmountTickSpacing(uniswapV3PoolFee);\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the desired tickLower and tickUpper based on the current price and the desiredTickRange\\r\\n    /// @return newDesiredTickLower The new tick lower desired for the liquidity position\\r\\n    /// @return newDesiredTickUpper The new tick upper desired for the liquidity position\\r\\n    function getNewDesiredTicks() public view override returns (int24 newDesiredTickLower, int24 newDesiredTickUpper) {\\r\\n        int24 currentPriceTickRounded = getCurrentPriceTickRounded();\\r\\n\\r\\n        newDesiredTickLower = currentPriceTickRounded - int24(desiredTickRange / 2);\\r\\n        newDesiredTickUpper = currentPriceTickRounded + int24(desiredTickRange / 2);\\r\\n\\r\\n        require(newDesiredTickLower >= TickMath.MIN_TICK, \\\"Tick lower is below MIN_TICK\\\");\\r\\n        require(newDesiredTickUpper <= TickMath.MAX_TICK, \\\"Tick upper is above MAX_TICK\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Returns whether the liquidity position needs an update\\r\\n    /// @notice This can return true when the price has moved outside of the current liquidity position range,\\r\\n    /// @notice or when the desired tick range has been updated by the owner\\r\\n    /// @return bool Indicates whether the liquidity position needs to be updated\\r\\n    function getIfLiquidityPositionNeedsUpdate() public view override returns (bool) {\\r\\n        return((!getPriceInActualLiquidityRange()) || (desiredTickLower != getActualTickLower()) || (desiredTickUpper != getActualTickUpper()));\\r\\n    }\\r\\n\\r\\n    /// @notice Returns whether the current Uniswap pool price is within the liquidity position range\\r\\n    /// @return priceInLiquidityRange Returns true if the current price is within the liquidity position range\\r\\n    function getPriceInActualLiquidityRange() public view override returns (bool priceInLiquidityRange) {\\r\\n        int24 currentPriceTick = TickMath.getTickAtSqrtRatio(getSqrtPriceX96());\\r\\n\\r\\n        if(getActualTickLower() <= currentPriceTick && currentPriceTick <= getActualTickUpper()) {\\r\\n            priceInLiquidityRange = true;\\r\\n        } else {\\r\\n            priceInLiquidityRange = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Returns whether the current Uniswap pool price within the desired liquidity position range\\r\\n    /// @return priceInLiquidityRange Returns true if the current price within the desired liquidity position range\\r\\n    function getPriceInDesiredLiquidityRange() public view override returns (bool priceInLiquidityRange) {\\r\\n        int24 currentPriceTick = TickMath.getTickAtSqrtRatio(getSqrtPriceX96());\\r\\n\\r\\n        if(desiredTickLower <= currentPriceTick && currentPriceTick <= desiredTickUpper) {\\r\\n            priceInLiquidityRange = true;\\r\\n        } else {\\r\\n            priceInLiquidityRange = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the current sqrtPriceX96 of the Uniswap pool\\r\\n    /// @return sqrtPriceX96 The current price of the Uniswap pool\\r\\n    function getSqrtPriceX96() public view override returns (uint160 sqrtPriceX96) {\\r\\n        (sqrtPriceX96,,,,,,) = IUniswapV3Pool(uniswapV3PoolAddress).slot0();\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the estimated token amount out from a swap. This calculation takes into account\\r\\n    /// @notice the pool fee, but assumes that no slippage occurs\\r\\n    /// @param tokenIn The address of the token being swapped\\r\\n    /// @param tokenOut The address of the token being swapped for\\r\\n    /// @param amountIn The amount of tokenIn being swapped\\r\\n    /// @param fee The fee to apply to the estimated swap\\r\\n    /// @return amountOut The estimated amount of tokenOut that will be received from the swap\\r\\n    function getEstimatedTokenOut(address tokenIn, address tokenOut, uint256 amountIn, uint24 fee) public view override returns (uint256 amountOut) {\\r\\n        uint256 sqrtPriceX96 = getSqrtPriceX96();\\r\\n\\r\\n        if(tokenIn < tokenOut) {\\r\\n            amountOut = FullMath.mulDiv(FullMath.mulDiv(amountIn, sqrtPriceX96, 2**96), sqrtPriceX96, 2**96) \\r\\n                * (FEE_DENOMINATOR - fee) / FEE_DENOMINATOR;\\r\\n        } else {\\r\\n            amountOut = FullMath.mulDiv(FullMath.mulDiv(amountIn, 2**96, sqrtPriceX96), 2**96, sqrtPriceX96)\\r\\n                * (FEE_DENOMINATOR - fee) / (FEE_DENOMINATOR);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the amount out minimum to use for a swap, according to the configured allowable slippage numerator\\r\\n    /// @param tokenIn The address of the token being swapped\\r\\n    /// @param tokenOut The address of the token being swapped for\\r\\n    /// @param amountIn The amount of tokenIn being swapped\\r\\n    /// @return amountOutMinimum The minimum amount of tokenOut to use for the swap\\r\\n    function getAmountOutMinimum(address tokenIn, address tokenOut, uint256 amountIn) public view override returns (uint256 amountOutMinimum) {\\r\\n        uint256 estimatedAmountOut = getEstimatedTokenOut(tokenIn, tokenOut, amountIn, uniswapV3PoolFee);\\r\\n\\r\\n        amountOutMinimum = estimatedAmountOut * (SLIPPAGE_DENOMINATOR - uniswapV3PoolSlippageNumerator) / SLIPPAGE_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the value of token0 and token1 held by this contract in terms of token0 value\\r\\n    /// @return The reserve value relative to token0\\r\\n    function getReserveValueInToken0() public view override returns (uint256) {\\r\\n        uint256 token0Balance = IERC20(token0).balanceOf(address(this));\\r\\n        uint256 token1Balance = IERC20(token1).balanceOf(address(this));\\r\\n\\r\\n        return token0Balance + getEstimatedTokenOut(token1, token0, token1Balance, uniswapV3PoolFee);\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the value of token0 and token1 held by the liquidity position in terms of token0 value\\r\\n    /// @return The liquidity position value relative to token0    \\r\\n    function getLiquidityPositionValueInToken0() public view override returns (uint256) {\\r\\n        (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\\r\\n            getSqrtPriceX96(),\\r\\n            TickMath.getSqrtRatioAtTick(desiredTickLower),\\r\\n            TickMath.getSqrtRatioAtTick(desiredTickUpper),\\r\\n            getLiquidityPositionLiquidityAmount()\\r\\n        );\\r\\n\\r\\n        return amount0 + getEstimatedTokenOut(token1, token0, amount1, 0);\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the total value (reserves + liquidity position) in terms of token 0 value\\r\\n    /// @return The total value relative to token0\\r\\n    function getTotalValueInToken0() public view override returns (uint256) {\\r\\n        return getReserveValueInToken0() + getLiquidityPositionValueInToken0();\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the total value (reserves + liquidity position) in terms of token 0 value\\r\\n    /// @return The total value relative to token0\\r\\n    function getTotalValueInToken1() public view override returns (uint256) {\\r\\n        return getEstimatedTokenOut(token0, token1, getTotalValueInToken0(), 0);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the total liquidity amount held by the current liquidity position\\r\\n    /// @return liquidityAmount The liquidity amount of the current liquidity position\\r\\n    function getLiquidityPositionLiquidityAmount() public view override returns (uint128 liquidityAmount) {\\r\\n        if(liquidityPositionTokenId > 0) {\\r\\n            ( , , , , , , , liquidityAmount, , , ,) = INonfungiblePositionManager(uniswapV3PositionManagerAddress)\\r\\n                .positions(liquidityPositionTokenId);\\r\\n        } else {\\r\\n            liquidityAmount = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the desired reserve amounts of token0 and token1 that are needed\\r\\n    /// @notice to add the maximum amount of liquidity to the current liquidity position\\r\\n    /// @param token0Amount The desired amount of token0\\r\\n    /// @param token1Amount The desired amount of token1\\r\\n    function getDesiredReserveAmounts() public view override returns (uint256 token0Amount, uint256 token1Amount) {\\r\\n        uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(desiredTickLower);\\r\\n        uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(desiredTickUpper);\\r\\n\\r\\n        uint128 liquidityAmount = LiquidityAmounts.getLiquidityForAmount0(\\r\\n            sqrtRatioAX96,\\r\\n            sqrtRatioBX96,\\r\\n            getReserveValueInToken0()\\r\\n        );\\r\\n\\r\\n        (token0Amount, token1Amount) = LiquidityAmounts.getAmountsForLiquidity(\\r\\n            getSqrtPriceX96(),\\r\\n            sqrtRatioAX96,\\r\\n            sqrtRatioBX96,\\r\\n            liquidityAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Returns whether the specified tick range is valid. For the tick range to be valid, it needs to be evenly\\r\\n    /// @notice divisible by the tick spacing, and be greater than or equal to (tickSpacing * 2)\\r\\n    function getIsTickRangeValid(uint24 tickRange) public view override returns (bool) {\\r\\n        uint24 tickSpacing = uint24(IUniswapV3Factory(uniswapV3FactoryAddress).feeAmountTickSpacing(uniswapV3PoolFee));\\r\\n\\r\\n        return(tickRange % tickSpacing == 0 && tickRange >= 2 * tickSpacing);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the pool fee of the Uniswap pool liquidity is being provided to\\r\\n    /// @return The Uniswap pool fee\\r\\n    function getUniswapV3PoolFee() public view override returns (uint24) {\\r\\n        return uniswapV3PoolFee;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the Gandalf pool fee numerator, that gets divided by FEE_DENOMINATOR\\r\\n    /// @notice to calculate the fee percentage\\r\\n    /// @return The Gandalf Pool Fee Numerator\\r\\n    function getGandalfPoolFeeNumerator() public view override returns (uint24) {\\r\\n        return gandalfPoolFeeNumerator;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the Gandalf pool fee numerator, that gets divided by SLIPPAGE_DENOMINATOR\\r\\n    /// @notice to calculate the slippage percentage\\r\\n    /// @return The Uniswap Pool Slippage Numerator   \\r\\n    function getUniswapV3PoolSlippageNumerator() public view override returns (uint24) {\\r\\n        return uniswapV3PoolSlippageNumerator;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the desired tick range\\r\\n    /// @return The desired tick range\\r\\n    function getDesiredTickRange() public view override returns (uint24) {\\r\\n        return desiredTickRange;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the desired tick lower\\r\\n    /// @return The desired tick lower\\r\\n    function getDesiredTickLower() public view override returns (int24) {\\r\\n        return desiredTickLower;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the desired tick upper\\r\\n    /// @return The desired tick upper\\r\\n    function getDesiredTickUpper() public view override returns (int24) {\\r\\n        return desiredTickUpper;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the actual tick lower of the current liquidity position\\r\\n    /// @return actualTickLower The actual tick lower of the current liquidity position\\r\\n    function getActualTickLower() public view override liquidityPositionMinted returns (int24 actualTickLower) {\\r\\n        (,,,,, actualTickLower,,,,,,) = INonfungiblePositionManager(uniswapV3PositionManagerAddress)\\r\\n            .positions(liquidityPositionTokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the actual tick upper of the current liquidity position\\r\\n    /// @return actualTickUpper The actual tick upper of the current liquidity position\\r\\n    function getActualTickUpper() public view override liquidityPositionMinted returns (int24 actualTickUpper) {\\r\\n        (,,,,,, actualTickUpper,,,,,) = INonfungiblePositionManager(uniswapV3PositionManagerAddress)\\r\\n            .positions(liquidityPositionTokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the token ID of the current liquidity position\\r\\n    /// @return The token ID of the current liquidity position\\r\\n    function getLiquidityPositionTokenId() public view override liquidityPositionMinted returns (uint256) {\\r\\n        return liquidityPositionTokenId;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the address of the Uniswap v3 Factory Address\\r\\n    /// @return The Uniswap v3 Factory Address\\r\\n    function getUniswapV3FactoryAddress() public view override returns (address) {\\r\\n        return uniswapV3FactoryAddress;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the Uniswap v3 Swap Router Address\\r\\n    /// @return The Uniswap v3 Swap Router Address\\r\\n    function getUniswapV3SwapRouterAddress() public view override returns (address) {\\r\\n        return uniswapV3SwapRouterAddress;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the Uniswap v3 Position Manager Address\\r\\n    /// @return The Uniswap v3 Position Manager Address\\r\\n    function getUniswapV3PositionManagerAddress() public view override returns (address) {\\r\\n        return uniswapV3PositionManagerAddress;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the Uniswap v3 Pool Address\\r\\n    /// @return The Uniswap v3 Pool Address\\r\\n    function getUniswapV3PoolAddress() public view override returns (address) {\\r\\n        return uniswapV3PoolAddress;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the address of token 0 of the Uniswap pool\\r\\n    /// @return The token 0 address\\r\\n    function getToken0() public view override returns (address) {\\r\\n        return token0;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the address of token 1 of the Uniswap pool\\r\\n    /// @return The token 1 address\\r\\n    function getToken1() public view override returns (address) {\\r\\n        return token1;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the price of the Gandalf token relative to token 0 scaled by 10^18\\r\\n    /// @return The price in token 0 scaled by 10^18\\r\\n    function getGandalfTokenPriceInToken0() public view override nonZeroSupply returns (uint256) {\\r\\n        return getTotalValueInToken0() * (10 ** decimals()) / totalSupply();\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the price of the Gandalf token relative to token 1 scaled by 10^18\\r\\n    /// @return The price in token 1 scaled by 10^18\\r\\n    function getGandalfTokenPriceInToken1() public view override nonZeroSupply returns (uint256) {\\r\\n        return getTotalValueInToken1() * (10 ** decimals()) / totalSupply();\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the fee denominator constant\\r\\n    /// @return The fee denominator constant\\r\\n    function getFeeDenominator() public pure override returns (uint24) {\\r\\n        return FEE_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    /// @notice Takes the address of two unsorted tokens and returns the tokens sorted for use with Uniswap v3\\r\\n    /// @param tokenA The address of the first unsorted token\\r\\n    /// @param tokenB The address of the second unsorted token\\r\\n    /// @return token0_ The address of the sorted token 0\\r\\n    /// @return token1_ The address of the sorted token 1\\r\\n    function getTokensSorted(address tokenA, address tokenB) public pure override returns (address token0_, address token1_) {\\r\\n        (token0_, token1_) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the slippage denominator used for calculating the allowable slippage percentage\\r\\n    /// @return The slippage denominator\\r\\n    function getSlippageDenominator() public pure override returns (uint24) {\\r\\n        return SLIPPAGE_DENOMINATOR;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x57f56eee681d44c0685bfd111bcbc32ec5ed55b1943b4c582323432490c2620e\",\"license\":\"MIT\"},\"contracts/interfaces/IGandalfPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\ninterface IGandalfPool {\\r\\n    /// @notice Allows the user to buy gandalf token using any amount of token0 and token1\\r\\n    /// @notice The Amount of gandalf token the user receives represents their share of the liquidity position\\r\\n    /// @param token0Amount The amount of token 0 the user wants to spend to buy the Gandalf token\\r\\n    /// @param token1Amount The amount of token 1 the user wants to spend to buy the Gandalf token\\r\\n    /// @param minGandalfTokenAmount The minimum amount of the Gandalf token the user is willing to receive\\r\\n    /// @param deadline The timestamp at which the transaction will expire\\r\\n    function buyGandalfToken(uint256 token0Amount, uint256 token1Amount, uint256 minGandalfTokenAmount, uint256 deadline) external;\\r\\n\\r\\n    /// @notice Allows a user to sell their gandalf tokens for their share of the liquidity position\\r\\n    /// @notice And receive either token0 or token1 in return\\r\\n    /// @param gandalfTokenAmount The amount of Gandalf token the user wants to sell\\r\\n    /// @param minTokenAmountToReceive The minimum amount of token0 or token1 the user is willing to receive\\r\\n    /// @param receiveInToken0 Boolean indicating whether the user wants to receive token0 or token1\\r\\n    /// @param deadline The timestamp at which the transaction will expire\\r\\n    function sellGandalfToken(uint256 gandalfTokenAmount, uint256 minTokenAmountToReceive, bool receiveInToken0, uint256 deadline) external;\\r\\n\\r\\n    /// @notice Rebalances the liquidity position by collecting fees, moving desired liquidity range ticks if needed,\\r\\n    /// @notice Making swaps between token0 and token1 if needed, and adding to liquidity position if funds are available\\r\\n    function rebalance() external;\\r\\n\\r\\n    /// @notice Allows the owner to set a new Gandalf Pool Fee Numerator\\r\\n    /// @param gandalfPoolFeeNumerator_ The new Gandalf Pool Fee Numerator\\r\\n    function setGandalfPoolFeeNumerator(uint24 gandalfPoolFeeNumerator_) external;\\r\\n\\r\\n    /// @notice Allows the owner to set a new Uniswap v3 Pool Slippage Numerator\\r\\n    /// @param uniswapV3PoolSlippageNumerator_ The new Uniswap v3 Pool Slippage Numerator\\r\\n    function setUniswapV3PoolSlippageNumerator(uint24 uniswapV3PoolSlippageNumerator_) external;\\r\\n\\r\\n    /// @notice Allows the owner to set a new Desired Tick Range\\r\\n    /// @param desiredTickRange_ The new Desired Tick Range\\r\\n    function setDesiredTickRange(uint24 desiredTickRange_) external;\\r\\n\\r\\n    /// @notice Gets the estimated amount of token0 or token1 user will receive when selling\\r\\n    /// @notice the specified amount of Gandalf Token\\r\\n    /// @param gandalfTokenAmountSold The amount of Gandalf Token being sold\\r\\n    /// @param receiveInToken0 Boolean indicating whether the user wants to receive token0 or token1\\r\\n    /// @return maxTokenAmountToReceive The max amount of the token the user could receive from sell\\r\\n    function getTokenAmountToReceiveFromSell(uint256 gandalfTokenAmountSold, bool receiveInToken0) external view returns (uint256 maxTokenAmountToReceive);\\r\\n\\r\\n    /// @notice Returns the current price of the Uniswap pool represented as a tick\\r\\n    /// @return The tick of the current price\\r\\n    function getCurrentPriceTick() external view returns (int24);\\r\\n\\r\\n    /// @notice Gets the current price represented as a tick, rounded according to the tick spacing\\r\\n    /// @return The current price tick rounded\\r\\n    function getCurrentPriceTickRounded() external view returns (int24);\\r\\n\\r\\n    /// @notice Gets the tick spacing of the Uniswap pool\\r\\n    /// @return The pool tick spacing\\r\\n    function getTickSpacing() external view returns (int24);\\r\\n\\r\\n    /// @notice Gets the desired tickLower and tickUpper based on the current price and the desiredTickRange\\r\\n    /// @return newDesiredTickLower The new tick lower desired for the liquidity position\\r\\n    /// @return newDesiredTickUpper The new tick upper desired for the liquidity position\\r\\n    function getNewDesiredTicks() external view returns (int24 newDesiredTickLower, int24 newDesiredTickUpper);\\r\\n\\r\\n    /// @notice Returns whether the liquidity position needs an update\\r\\n    /// @notice This can return true when the price has moved outside of the current liquidity position range,\\r\\n    /// @notice or when the desired tick range has been updated by the owner\\r\\n    /// @return bool Indicates whether the liquidity position needs to be updated\\r\\n    function getIfLiquidityPositionNeedsUpdate() external view returns (bool);\\r\\n\\r\\n    /// @notice Returns whether the current Uniswap pool price is within the liquidity position range\\r\\n    /// @return priceInLiquidityRange Returns true if the current price is within the liquidity position range\\r\\n    function getPriceInActualLiquidityRange() external view returns (bool priceInLiquidityRange);\\r\\n\\r\\n    /// @notice Returns whether the current Uniswap pool price within the desired liquidity position range\\r\\n    /// @return priceInLiquidityRange Returns true if the current price within the desired liquidity position range\\r\\n    function getPriceInDesiredLiquidityRange() external view returns (bool priceInLiquidityRange);\\r\\n\\r\\n    /// @notice Returns the current sqrtPriceX96 of the Uniswap pool\\r\\n    /// @return sqrtPriceX96 The current price of the Uniswap pool\\r\\n    function getSqrtPriceX96() external view returns (uint160 sqrtPriceX96);\\r\\n\\r\\n    /// @notice Gets the estimated token amount out from a swap. This calculation takes into account\\r\\n    /// @notice the pool fee, but assumes that no slippage occurs\\r\\n    /// @param tokenIn The address of the token being swapped\\r\\n    /// @param tokenOut The address of the token being swapped for\\r\\n    /// @param amountIn The amount of tokenIn being swapped\\r\\n    /// @param fee The fee to apply to the estimated swap\\r\\n    /// @return amountOut The estimated amount of tokenOut that will be received from the swap\\r\\n    function getEstimatedTokenOut(address tokenIn, address tokenOut, uint256 amountIn, uint24 fee) external view returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice Gets the amount out minimum to use for a swap, according to the configured allowable slippage numerator\\r\\n    /// @param tokenIn The address of the token being swapped\\r\\n    /// @param tokenOut The address of the token being swapped for\\r\\n    /// @param amountIn The amount of tokenIn being swapped\\r\\n    /// @return amountOutMinimum The minimum amount of tokenOut to use for the swap\\r\\n    function getAmountOutMinimum(address tokenIn, address tokenOut, uint256 amountIn) external view returns (uint256 amountOutMinimum);\\r\\n\\r\\n    /// @notice Gets the value of token0 and token1 held by this contract in terms of token0 value\\r\\n    /// @return The reserve value relative to token0\\r\\n    function getReserveValueInToken0() external view returns (uint256);\\r\\n\\r\\n    /// @notice Gets the value of token0 and token1 held by the liquidity position in terms of token0 value\\r\\n    /// @return The liquidity position value relative to token0    \\r\\n    function getLiquidityPositionValueInToken0() external view returns (uint256);\\r\\n\\r\\n    /// @notice Gets the total value (reserves + liquidity position) in terms of token 0 value\\r\\n    /// @return The total value relative to token0\\r\\n    function getTotalValueInToken0() external view returns (uint256);\\r\\n\\r\\n    /// @notice Gets the total value (reserves + liquidity position) in terms of token 0 value\\r\\n    /// @return The total value relative to token0\\r\\n    function getTotalValueInToken1() external view returns (uint256);\\r\\n\\r\\n    /// @notice Returns the total liquidity amount held by the current liquidity position\\r\\n    /// @return liquidityAmount The liquidity amount of the current liquidity position\\r\\n    function getLiquidityPositionLiquidityAmount() external view returns (uint128 liquidityAmount);\\r\\n\\r\\n    /// @notice Returns the desired reserve amounts of token0 and token1 that are needed\\r\\n    /// @notice to add the maximum amount of liquidity to the current liquidity position\\r\\n    /// @param token0Amount The desired amount of token0\\r\\n    /// @param token1Amount The desired amount of token1\\r\\n    function getDesiredReserveAmounts() external view returns (uint256 token0Amount, uint256 token1Amount);\\r\\n\\r\\n    /// @notice Returns whether the specified tick range is valid. For the tick range to be valid, it needs to be evenly\\r\\n    /// @notice divisible by the tick spacing, and be greater than or equal to (tickSpacing * 2)\\r\\n    function getIsTickRangeValid(uint24 tickRange) external view returns (bool);\\r\\n\\r\\n    /// @notice Returns the pool fee of the Uniswap pool liquidity is being provided to\\r\\n    /// @return The Uniswap pool fee\\r\\n    function getUniswapV3PoolFee() external view returns (uint24);\\r\\n\\r\\n    /// @notice Returns the Gandalf pool fee numerator, that gets divided by FEE_DENOMINATOR\\r\\n    /// @notice to calculate the fee percentage\\r\\n    /// @return The Gandalf Pool Fee Numerator\\r\\n    function getGandalfPoolFeeNumerator() external view returns (uint24);\\r\\n\\r\\n    /// @notice Returns the Gandalf pool fee numerator, that gets divided by SLIPPAGE_DENOMINATOR\\r\\n    /// @notice to calculate the slippage percentage\\r\\n    /// @return The Uniswap Pool Slippage Numerator   \\r\\n    function getUniswapV3PoolSlippageNumerator() external view returns (uint24);\\r\\n\\r\\n    /// @notice Returns the desired tick range\\r\\n    /// @return The desired tick range\\r\\n    function getDesiredTickRange() external view returns (uint24);\\r\\n\\r\\n    /// @notice Returns the desired tick lower\\r\\n    /// @return The desired tick lower\\r\\n    function getDesiredTickLower() external view returns (int24);\\r\\n\\r\\n    /// @notice Returns the desired tick upper\\r\\n    /// @return The desired tick upper\\r\\n    function getDesiredTickUpper() external view returns (int24);\\r\\n\\r\\n    /// @notice Returns the actual tick lower of the current liquidity position\\r\\n    /// @return actualTickLower The actual tick lower of the current liquidity position\\r\\n    function getActualTickLower() external view returns (int24 actualTickLower);\\r\\n\\r\\n    /// @notice Returns the actual tick upper of the current liquidity position\\r\\n    /// @return actualTickUpper The actual tick upper of the current liquidity position\\r\\n    function getActualTickUpper() external view returns (int24 actualTickUpper);\\r\\n\\r\\n    /// @notice Returns the token ID of the current liquidity position\\r\\n    /// @return The token ID of the current liquidity position\\r\\n    function getLiquidityPositionTokenId() external view returns (uint256);\\r\\n\\r\\n    /// @notice Returns the address of the Uniswap v3 Factory Address\\r\\n    /// @return The Uniswap v3 Factory Address\\r\\n    function getUniswapV3FactoryAddress() external view returns (address);\\r\\n\\r\\n    /// @notice Returns the Uniswap v3 Swap Router Address\\r\\n    /// @return The Uniswap v3 Swap Router Address\\r\\n    function getUniswapV3SwapRouterAddress() external view returns (address);\\r\\n\\r\\n    /// @notice Returns the Uniswap v3 Position Manager Address\\r\\n    /// @return The Uniswap v3 Position Manager Address\\r\\n    function getUniswapV3PositionManagerAddress() external view returns (address);\\r\\n\\r\\n    /// @notice Returns the Uniswap v3 Pool Address\\r\\n    /// @return The Uniswap v3 Pool Address\\r\\n    function getUniswapV3PoolAddress() external view returns (address);\\r\\n\\r\\n    /// @notice Returns the address of token 0 of the Uniswap pool\\r\\n    /// @return The token 0 address\\r\\n    function getToken0() external view returns (address);\\r\\n\\r\\n    /// @notice Returns the address of token 1 of the Uniswap pool\\r\\n    /// @return The token 1 address\\r\\n    function getToken1() external view returns (address);\\r\\n\\r\\n    /// @notice Returns the price of the Gandalf token relative to token 0 scaled by 10^18\\r\\n    /// @return The price in token 0 scaled by 10^18\\r\\n    function getGandalfTokenPriceInToken0() external view returns (uint256);\\r\\n\\r\\n\\r\\n    /// @notice Returns the price of the Gandalf token relative to token 1 scaled by 10^18\\r\\n    /// @return The price in token 1 scaled by 10^18\\r\\n    function getGandalfTokenPriceInToken1() external view returns (uint256);\\r\\n\\r\\n    /// @notice Returns the fee denominator constant\\r\\n    /// @return The fee denominator constant\\r\\n    function getFeeDenominator() external pure returns (uint24);\\r\\n\\r\\n    /// @notice Takes the address of two unsorted tokens and returns the tokens sorted for use with Uniswap v3\\r\\n    /// @param tokenA The address of the first unsorted token\\r\\n    /// @param tokenB The address of the second unsorted token\\r\\n    /// @return token0_ The address of the sorted token 0\\r\\n    /// @return token1_ The address of the sorted token 1\\r\\n    function getTokensSorted(address tokenA, address tokenB) external pure returns (address token0_, address token1_);\\r\\n\\r\\n    /// @notice Returns the slippage denominator used for calculating the allowable slippage percentage\\r\\n    /// @return The slippage denominator\\r\\n    function getSlippageDenominator() external pure returns (uint24);\\r\\n}\",\"keccak256\":\"0xc4e0b25cf554df41023f406f6e57cac510f281f01421d9aabe65ef938d5d8c15\",\"license\":\"MIT\"},\"contracts/uniswap/v3-core/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\",\"keccak256\":\"0x4e457cd5b12e4f0bc9426840359fb3f4faf5b609c53b19bd1ddc9cc17d07c05f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/uniswap/v3-core/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xeb966aa0ba2cca10735d95172c76393bb9237a70464d2331170e6a45bb5e1903\",\"license\":\"MIT\"},\"contracts/uniswap/v3-core/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    error T();\\n    error R();\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\\n\\n            uint256 ratio = absTick & 0x1 != 0\\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\\n                : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {\\n            // second inequality must be < because the price can never reach the price at the max tick\\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = ratio;\\n            uint256 msb = 0;\\n\\n            assembly {\\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(5, gt(r, 0xFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(4, gt(r, 0xFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(3, gt(r, 0xFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(2, gt(r, 0xF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(1, gt(r, 0x3))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := gt(r, 0x1)\\n                msb := or(msb, f)\\n            }\\n\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\",\"keccak256\":\"0x2adb8fb790220ae9096d222f6e97b2ae88648f6cbcda56f7564dd835ca2cbb1f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/uniswap/v3-periphery/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\",\"keccak256\":\"0xb2a3690535539dfc786a77633f02c45fc8b4a656419df6c91f4dea45cda79887\",\"license\":\"GPL-2.0-or-later\"},\"contracts/uniswap/v3-periphery/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\nimport './PoolAddress.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\",\"keccak256\":\"0x1777a2e97be3817bd26db02616afc50dd433eaea20d0f3506031421e86372f2d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/uniswap/v3-periphery/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\",\"keccak256\":\"0x48ae63f572aa026338f951d27d7ffa7ba603e1a588666924d0a8ace50713e749\",\"license\":\"GPL-2.0-or-later\"},\"contracts/uniswap/v3-periphery/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\",\"keccak256\":\"0x8bfcd97285f6b3b0aa3b58f822d365d5548e8a5ad36623b0bcabb25c0ee56a3e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/uniswap/v3-periphery/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\",\"keccak256\":\"0x96000078991369e525f5e9c93d520a38b9013a25618378bb74a48632b71f4e8d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/uniswap/v3-periphery/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\",\"keccak256\":\"0x99eab284dbc18eb958f0a2d545dd1bc29fa1b1c551df17bc63e44cc3417c0e5a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/uniswap/v3-periphery/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '../v3-core/FullMath.sol';\\nimport '../v3-core/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        unchecked {\\n            return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n        }\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        unchecked {\\n            return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n        }\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        unchecked {\\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n            return\\n                FullMath.mulDiv(\\n                    uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                    sqrtRatioBX96 - sqrtRatioAX96,\\n                    sqrtRatioBX96\\n                ) / sqrtRatioAX96;\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        unchecked {\\n            return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n        }\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\",\"keccak256\":\"0x38591b45d03959c9521dd9a7c21d66282a9dd93c2d77ad2765f3a0d409dfbb9c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/uniswap/v3-periphery/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xa598dd2fba360510c5a8f02f44423a4468e902df5857dbce3ca162a43a3a31ff;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex'ff',\\n                            factory,\\n                            keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                            POOL_INIT_CODE_HASH\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\",\"keccak256\":\"0x4f22e1a1a1ad53cc24b0f4fc65b29fd7d3a92a3287ae0302d8296261dc7a8cdf\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608080604052346100165761425f908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8062862a4314611c0357806302ba214214611bda57806302f52f7f14611bb657806306fdde0314611b12578063071ab48914611af7578063095ea7b314611a765780630b93fb8614611a4f57806318160ddd14611a245780631a534b79146119e45780631c418996146119b05780631da022d6146110a857806323b872dd14610fd957806323bc093814610fbe5780632ce2dcf914610daa578063313ce56714610d8e5780633999d1f214610d655780633c1b890614610d3f5780634305037f14610d24578063435254d214610d0057806348a223d714610cd35780635245da5614610c8f5780635282e18c14610907578063591ad7c5146108e25780635e774c2f146108b957806361ad110514610896578063630fea1c1461087b57806363f676c814610808578063685c26d8146107dc5780636e829d35146107c15780636f26a7101461079857806370a0823114610751578063715018a6146106e757806371aff2a9146106cc5780637a39dec0146106a65780637d7c2a1c1461068d5780637db3fd69146106725780638a1b2b7b146106495780638da5cb5b1461061357806395d89b41146105315780639b2cf69b14610506578063a9059cbb146104d5578063afe17b00146104ba578063b1f8f13b1461048d578063b213ffbb14610464578063ba94a3151461043b578063bbb37017146102e7578063c1b70b751461040d578063c2f6d34a146103e4578063c59ca7e5146103be578063c6d2c20e14610392578063ccbfc16c14610379578063dd62ed3e14610330578063e53f2d1714610315578063f2fde38b146102ec578063f4e1fc41146102e7578063fc518bff146102be5763fce36a4b1461028e57600080fd5b346102b95760203660031901126102b9576102b76102aa611c26565b6102b26129a1565b612fee565b005b600080fd5b346102b95760003660031901126102b95760206001546102df811515612362565b604051908152f35b611d59565b346102b95760203660031901126102b9576102b7610308611c81565b6103106129a1565b61292d565b346102b95760003660031901126102b95760206102df6128dd565b346102b95760403660031901126102b957610349611c81565b61035a610354611c97565b91612594565b9060018060a01b03166000526020526020604060002054604051908152f35b346102b95760206102df61038c36611d24565b916128b0565b346102b95760003660031901126102b95760206102df6103b06126fa565b6103b86128dd565b9061217c565b346102b95760003660031901126102b957602062ffffff60005460181c16604051908152f35b346102b95760003660031901126102b9576003546040516001600160a01b039091168152602090f35b346102b95760003660031901126102b957602061043061042b6127e9565b613af9565b6040519060020b8152f35b346102b95760003660031901126102b9576006546040516001600160a01b039091168152602090f35b346102b95760003660031901126102b9576002546040516001600160a01b039091168152602090f35b346102b95760003660031901126102b95760206104a86127e9565b6040516001600160a01b039091168152f35b346102b95760003660031901126102b95760206102df6126fa565b346102b95760403660031901126102b9576104fb6104f1611c81565b602435903361322a565b602060405160018152f35b346102b95760403660031901126102b95760243580151581036102b9576102df6020916004356126b8565b346102b95760003660031901126102b957604051600060008051602061418a83398151915280549061056282611e7e565b808552916020916001918281169081156105e6575060011461059f575b61059b8661058f81880382611cad565b60405191829182611c38565b0390f35b600090815293506000805160206141ea8339815191525b8385106105d35750505050810160200161058f8261059b8561057f565b80548686018401529382019381016105b6565b905086955061059b9693506020925061058f94915060ff191682840152151560051b82010192938561057f565b346102b95760003660031901126102b9576000805160206141aa833981519152546040516001600160a01b039091168152602090f35b346102b95760203660031901126102b9576102b7610665611c26565b61066d6129a1565b6130f8565b346102b95760003660031901126102b9576020610430612643565b346102b95760003660031901126102b9576102b761340c565b346102b95760003660031901126102b957602062ffffff60005460301c16604051908152f35b346102b95760003660031901126102b95760206104306125cd565b346102b95760003660031901126102b9576107006129a1565b6000805160206141aa83398151915280546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346102b95760203660031901126102b9576001600160a01b03610772611c81565b1660005260008051602061416a8339815191526020526020604060002054604051908152f35b346102b95760003660031901126102b9576007546040516001600160a01b039091168152602090f35b346102b95760003660031901126102b95760206102df61256c565b346102b95760003660031901126102b95760206107f76124f5565b6001600160801b0360405191168152f35b346102b95760003660031901126102b9576000805160206141ca833981519152546108348115156120a2565b61083f6103b06126fa565b670de0b6b3a764000090818102918183041490151715610865576020916102df91611fe5565b634e487b7160e01b600052601160045260246000fd5b346102b95760003660031901126102b95760206104306123ae565b346102b95760003660031901126102b957602062ffffff60005416604051908152f35b346102b95760003660031901126102b9576004546040516001600160a01b039091168152602090f35b346102b95760003660031901126102b95760206108fd612322565b6040519015158152f35b346102b95760803660031901126102b957604435600435602482151583036102b957610937426064351015612189565b61094183836126b8565b906001600160801b0393610983610961858761095b6124f5565b16611fd2565b9561097d6000805160206141ca83398151915297885490611fe5565b16613dbe565b61098b613e8f565b15610c75576007546006546001600160a01b03918216939116905b6040516370a0823160e01b80825230600483015260209590936001600160a01b03929091878288818488165afa908115610b5e578390600092610c42575b6109ee9350613f1e565b169160405181815230600482015285818681875afa908115610b5e57600091610c15575b508211610bb9575b50610a3e620f42409162ffffff610a378160005460181c16611fa4565b1690611fd2565b0482358110610b6a5760009160448592604051948593849263a9059cbb60e01b8452336004850152888401525af18015610b5e57610b2a575b503315610b1457503360005260008051602061416a8339815191529283825260406000205493838510610aee5790836000957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef949333885284520360408620558381540390556040519283523392a36102b761340c565b60405163391434e360e21b81523360048201526024810186905260448101859052606490fd5b604051634b637e8f60e11b815260006004820152fd5b8281813d8311610b57575b610b3f8183611cad565b810103126102b957610b509061211e565b5084610a77565b503d610b35565b6040513d6000823e3d90fd5b60405162461bcd60e51b8152600481018590526022818501527f4d696e696d756d20746f6b656e20616d6f756e742063616e6e6f74206265206d604482015261195d60f21b6064820152608490fd5b905060405190815230600482015283818481855afa908115610b5e57600091610be6575b50610a3e610a1a565b90508381813d8311610c0e575b610bfd8183611cad565b810103126102b95751610a3e610bdd565b503d610bf3565b90508581813d8311610c3b575b610c2c8183611cad565b810103126102b9575188610a12565b503d610c22565b9150508782813d8311610c6e575b610c5a8183611cad565b810103126102b957826109ee9251916109e4565b503d610c50565b6006546007546001600160a01b03918216939116906109a6565b346102b95760403660031901126102b9576040610cbb610cad611c81565b610cb5611c97565b9061230b565b82516001600160a01b03928316815291166020820152f35b346102b95760003660031901126102b9576040610cee61222c565b82519160020b825260020b6020820152f35b346102b95760003660031901126102b957602060005460601c60020b604051908152f35b346102b95760003660031901126102b95760206108fd6121e2565b346102b95760003660031901126102b957602062ffffff60005460481c16604051908152f35b346102b95760003660031901126102b9576005546040516001600160a01b039091168152602090f35b346102b95760003660031901126102b957602060405160128152f35b346102b95760803660031901126102b957600435602435610dcb818361217c565b15610f6257610dde426064351015612189565b610de96103b06126fa565b15610f4957620f424091610e0b610e5492610e056103b06126fa565b926132ff565b610e4f610e3b610e2583610e206103b06126fa565b6121d5565b6000805160206141ca8339815191525490611fd2565b62ffffff610a378160005460181c16611fa4565b611fe5565b045b6044358110610ef1573315610ed8576000805160206141ca833981519152610e7f82825461217c565b90553360005260008051602061416a833981519152602052604060002081815401905560405190815260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a36102b761340c565b60405163ec442f0560e01b815260006004820152602490fd5b60405162461bcd60e51b815260206004820152602a60248201527f4d696e696d756d2067616e64616c6620746f6b656e20616d6f756e742063616e6044820152691b9bdd081899481b595d60b21b6064820152608490fd5b610f52916132ff565b69d3c21bcecceda1000000610e56565b60405162461bcd60e51b815260206004820152602e60248201527f53756d206f6620746f6b656e20616d6f756e7473206d7573742062652067726560448201526d61746572207468616e207a65726f60901b6064820152608490fd5b346102b95760003660031901126102b95760206108fd61212b565b346102b957610fe736611d24565b90610ff183612594565b33600052602052604060002054926000198403611013575b6104fb935061322a565b828410611082576001600160a01b0381161561106957331561105057826104fb9461103d83612594565b3360005260205203604060002055611009565b604051634a1406b160e11b815260006004820152602490fd5b60405163e602df0560e01b815260006004820152602490fd5b604051637dc7a0d960e11b81523360048201526024810185905260448101849052606490fd5b346102b9576101803660031901126102b9576110c2611c81565b6024356001600160401b0381116102b9576110e1903690600401611cce565b6044356001600160401b0381116102b957611100903690600401611cce565b6064356001600160a01b03811681036102b957608435916001600160a01b03831683036102b95760a435946001600160a01b03861686036102b95760c4356001600160a01b03811690036102b95760e4356001600160a01b03811690036102b95762ffffff9081610104351661010435036102b957610124359282841684036102b95782610144351661014435036102b95782610164351661016435036102b95760008051602061420a83398151915254966001600160401b03881615806119a2575b60016001600160401b038a16149081611998575b15908161198f575b5061197d5760016001600160401b031989161760008051602061420a8339815191525560ff8860401c1615611950575b6112176140fa565b61121f6140fa565b6112288361292d565b6112306140fa565b6112386140fa565b8051906001600160401b03821161181c57819061126360008051602061414a83398151915254611e7e565b601f81116118cf575b50602090601f831160011461183d57600092611832575b50508160011b916000199060031b1c19161760008051602061414a833981519152555b8051906001600160401b03821161181c576112cf60008051602061418a83398151915254611e7e565b601f81116117a6575b50602090601f83116001146117125761132093929160009183611707575b50508160011b916000199060031b1c19161760008051602061418a833981519152556103106129a1565b6000805462ffffff1916929091169182179055604051630b4c774160e11b815260c4356001600160a01b03908116600483015260e435811660248301526044820192909252906020908290606490829086165afa908115610b5e576000916116cd575b50600580546001600160a01b0319166001600160a01b039290921691821790551561169257600280546001600160a01b03199081166001600160a01b0393841617909155600380548216848416179055600480549091169185169190911790556113ef61016435612fee565b6113fb610104356130f8565b611407610144356129da565b61141560e43560c43561230b565b600780546001600160a01b03199081166001600160a01b039384161790915560068054909116928216928317905560405163095ea7b360e01b8082529184166004820152600019602482018190529591939192602090829060449082906000905af18015610b5e57611659575b506006546040518481526001600160a01b03848116600483015260248201889052909160209183916044918391600091165af18015610b5e5761161a575b506007546040518481526001600160a01b039283166004820152602481018790529160209183916044918391600091165af18015610b5e576115db575b506044602092600060018060a01b03600754166040519788958694855260018060a01b0316600485015260248401525af18015610b5e576115a1575b60ff915060401c161561154857005b68ff00000000000000001960008051602061420a833981519152541660008051602061420a833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b6020823d6020116115d3575b816115ba60209383611cad565b810103126102b9576115cd60ff9261211e565b50611539565b3d91506115ad565b6020813d602011611612575b816115f460209383611cad565b810103126102b95760209261160a60449261211e565b5092506114fd565b3d91506115e7565b6020813d602011611651575b8161163360209383611cad565b810103126102b95760009161164960209261211e565b5091506114c0565b3d9150611626565b6020813d60201161168a575b8161167260209383611cad565b810103126102b9576116839061211e565b5085611482565b3d9150611665565b60405162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b90506020813d6020116116ff575b816116e860209383611cad565b810103126102b9576116f99061210a565b85611383565b3d91506116db565b015190508a806112f6565b9060008051602061418a8339815191526000526000805160206141ea8339815191529160005b601f198516811061178e57509183916001936113209695601f19811610611775575b505050811b0160008051602061418a83398151915255610308565b015160001960f88460031b161c191690558a808061175a565b91926020600181928685015181550194019201611738565b60008051602061418a833981519152600052601f830160051c6000805160206141ea8339815191520160208410611807575b601f820160051c6000805160206141ea8339815191520181106117fb57506112d8565b600081556001016117d8565b506000805160206141ea8339815191526117d8565b634e487b7160e01b600052604160045260246000fd5b015190508a80611283565b925060008051602061414a83398151915260005260008051602061412a833981519152906000935b601f19841685106118b4576001945083601f1981161061189b575b505050811b0160008051602061414a833981519152556112a6565b015160001960f88460031b161c191690558a8080611880565b81810151835560209485019460019093019290910190611865565b90915060008051602061414a833981519152600052601f830160051c60008051602061412a833981519152016020841061193b575b908392915b601f820160051c60008051602061412a83398151915201811061192c575061126c565b60008155849350600101611909565b5060008051602061412a833981519152611904565b68ffffffffffffffffff198816680100000000000000011760008051602061420a8339815191525561120f565b60405163f92ee8a960e01b8152600490fd5b9050158a6111df565b303b1591506111d7565b5060ff8860401c16156111c3565b346102b95760003660031901126102b9576000805160206141ca833981519152546119dc8115156120a2565b61083f61256c565b346102b95760803660031901126102b9576119fd611c81565b611a05611c97565b60643562ffffff811681036102b9576020926102df9260443591612047565b346102b95760003660031901126102b95760206000805160206141ca83398151915254604051908152f35b346102b95760003660031901126102b9576040611a6a611f1a565b82519182526020820152f35b346102b95760403660031901126102b957611a8f611c81565b602435903315611069576001600160a01b031690811561105057611ab233612594565b82600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b346102b95760003660031901126102b9576020610430611ed5565b346102b95760003660031901126102b957604051600060008051602061414a833981519152805490611b4382611e7e565b808552916020916001918281169081156105e65750600114611b6f5761059b8661058f81880382611cad565b6000908152935060008051602061412a8339815191525b838510611ba35750505050810160200161058f8261059b8561057f565b8054868601840152938201938101611b86565b346102b95760003660031901126102b957602060005460781c60020b604051908152f35b346102b95760203660031901126102b9576102b7611bf6611c26565b611bfe6129a1565b6129da565b346102b95760203660031901126102b95760206108fd611c21611c26565b611d85565b6004359062ffffff821682036102b957565b6020808252825181830181905290939260005b828110611c6d57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611c4b565b600435906001600160a01b03821682036102b957565b602435906001600160a01b03821682036102b957565b90601f801991011681019081106001600160401b0382111761181c57604052565b81601f820112156102b9578035906001600160401b03821161181c5760405192611d02601f8401601f191660200185611cad565b828452602083830101116102b957816000926020809301838601378301015290565b60609060031901126102b9576001600160a01b039060043582811681036102b9579160243590811681036102b9579060443590565b346102b95760003660031901126102b9576020604051620f42408152f35b51908160020b82036102b957565b60018060a01b03600254169062ffffff6000916020828454166024604051809781936322afcccb60e01b835260048301525afa938415611e73578394611e32575b508116908084168015611e1e57820616159283611de4575b50505090565b9091925060011b916301fffffe62fffffe841693168303611e0a57501015388080611dde565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b84526012600452602484fd5b9093506020813d602011611e6b575b81611e4e60209383611cad565b81010312611e6757611e608291611d77565b9390611dc6565b8280fd5b3d9150611e41565b6040513d85823e3d90fd5b90600182811c92168015611eae575b6020831014611e9857565b634e487b7160e01b600052602260045260246000fd5b91607f1691611e8d565b600291820b910b0390627fffff198212627fffff83131761086557565b611ee061042b6127e9565b611ee8612643565b60020b908115611f0457611f01918160020b0790611eb8565b90565b634e487b7160e01b600052601260045260246000fd5b600054611f3b611f2f8260601c60020b612ac2565b9160781c60020b612ac2565b611f73611f466126fa565b826001600160a01b038581831682821611611f9a575b611f6a828416838316612eaa565b92031691612f79565b906001600160801b0382169182036102b957611f9692611f916127e9565b612e33565b9091565b5085915084611f5c565b9062ffffff809216620f42400391821161086557565b90620f42409182810292818404149015171561086557565b8181029291811591840414171561086557565b8115611f04570490565b620f424092906001600160a01b0380806120076127e9565b16941691161015612031578161202361202d9361202893612eaa565b612eaa565b611fba565b0490565b8161204261202d9361202893612eef565b612eef565b620f4240939192906001600160a01b0380806120616127e9565b1695169116101561208a57610a376120848461202361202d9662ffffff95612eaa565b92611fa4565b610a376120848461204261202d9662ffffff95612eef565b156120a957565b60405162461bcd60e51b815260206004820152603360248201527f537570706c79206d7573742062652067726561746572207468616e207a65726f60448201527220746f2063616c63756c61746520707269636560681b6064820152608490fd5b51906001600160a01b03821682036102b957565b519081151582036102b957565b6121336121e2565b15801561215f575b80156121445790565b5060005460781c6121536125cd565b60020b9060020b141590565b5060005460601c61216e6123ae565b60020b9060020b141561213b565b9190820180921161086557565b1561219057565b60405162461bcd60e51b815260206004820152601c60248201527f5472616e73616374696f6e20646561646c696e652065787069726564000000006044820152606490fd5b9190820391821161086557565b6121ed61042b6127e9565b6121f56123ae565b9060020b809160020b13159081612217575b501561221257600190565b600090565b90506122216125cd565b60020b121538612207565b612234611ed5565b90627fffff908160005460491c1660020b61224f8185611eb8565b9360020b01918213627fffff198312176108655781620d89e7198460020b126122c657620d89e89060020b1361228157565b60405162461bcd60e51b815260206004820152601c60248201527f5469636b2075707065722069732061626f7665204d41585f5449434b000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f5469636b206c6f7765722069732062656c6f77204d494e5f5449434b000000006044820152606490fd5b6001600160a01b038281169082161015611f965791565b61232d61042b6127e9565b6000549060020b808260601c60020b13159182612351575b50501561221257600190565b60781c60020b121590503880612345565b1561236957565b60405162461bcd60e51b815260206004820152601c60248201527f4e6f206c697175696469747920706f736974696f6e206d696e746564000000006044820152606490fd5b6001546123bc811515612362565b6004805460405163133f757160e31b815291820192909252610180918290829060249082906001600160a01b03165afa918215610b5e576000926123ff57505090565b61241e9250803d1061242d575b6124168183611cad565b810190612448565b50505050505094505050505090565b503d61240c565b51906001600160801b03821682036102b957565b9190826101809103126102b95781516bffffffffffffffffffffffff811681036102b957916124796020820161210a565b916124866040830161210a565b916124936060820161210a565b91608082015162ffffff811681036102b957916124b260a08201611d77565b916124bf60c08301611d77565b916124cc60e08201612434565b916101008201519161012081015191611f016101606124ee6101408501612434565b9301612434565b6001548015612566576004805460405163133f757160e31b815291820192909252610180918290829060249082906001600160a01b03165afa918215610b5e5760009261254157505090565b6125579250803d1061242d576124168183611cad565b50505050965050505050505090565b50600090565b600654600754611f01916001600160a01b03908116911661258e6103b06126fa565b91611fef565b6001600160a01b031660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020526040902090565b6001546125db811515612362565b6004805460405163133f757160e31b815291820192909252610180918290829060249082906001600160a01b03165afa918215610b5e5760009261261e57505090565b6126349250803d1061242d576124168183611cad565b50505050509550505050505090565b60018060a01b0360025416602062ffffff600054166024604051809481936322afcccb60e01b835260048301525afa908115610b5e57600091612684575090565b90506020813d6020116126b0575b8161269f60209383611cad565b810103126102b957611f0190611d77565b3d9150612692565b90156126eb576126d5611f01916126d06103b06126fa565b611fd2565b6000805160206141ca8339815191525490611fe5565b6126d5611f01916126d061256c565b6006546040516370a0823160e01b8082523060048301526001600160a01b03928316926020908184602481885afa938415610b5e576000946127ab575b5060075416916040519081523060048201528181602481865afa918215610b5e57600092612779575b5050906103b891611f019462ffffff6000541692612047565b9080939250813d83116127a4575b6127918183611cad565b810103126102b9579051836103b8612760565b503d612787565b9093508181813d83116127d3575b6127c38183611cad565b810103126102b957519238612737565b503d6127b9565b519061ffff821682036102b957565b600554604051633850c7bd60e01b8152906001600160a01b039060e0908390600490829085165afa918215610b5e5760009261282457505090565b909160e0823d60e0116128a8575b8161283f60e09383611cad565b810103126128a557815192831683036128a55761285e60208301611d77565b5061286b604083016127da565b50612878606083016127da565b50612885608083016127da565b5060a082015160ff8116036128a5575060c06128a1910161211e565b5090565b80fd5b3d9150612832565b620f424092610a3761202d936128d36000549462ffffff94859384881692612047565b9360301c16611fa4565b611f016103b86129126128ee6127e9565b600054612903611f2f8260601c60020b612ac2565b9061290c6124f5565b92612e33565b6007546006549293926001600160a01b039081169116611fef565b6001600160a01b03908116908115612988576000805160206141aa83398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b604051631e4fbdf760e01b815260006004820152602490fd5b6000805160206141aa833981519152546001600160a01b031633036129c257565b60405163118cdaa760e01b8152336004820152602490fd5b6000549062ffffff808360481c1690821614612a67576129f981611d85565b15612a225762ffffff60481b9060481b169062ffffff60481b191617600055612a20614038565b565b60405162461bcd60e51b815260206004820152601760248201527f5469636b2072616e6765206973206e6f742076616c69640000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602d60248201527f44657369726564205469636b2052616e6765206d75737420626520736574207460448201526c6f2061206e65772076616c756560981b6064820152608490fd5b60020b6000811215612e2d5780600003905b620d89e88211612e1b576001821615612e09576001600160881b036ffffcb933bd6fad37aa2d162d1a5940015b169160028116612ded575b60048116612dd1575b60088116612db5575b60108116612d99575b60208116612d7d575b60408116612d61575b608090818116612d46575b6101008116612d2b575b6102008116612d10575b6104008116612cf5575b6108008116612cda575b6110008116612cbf575b6120008116612ca4575b6140008116612c89575b6180008116612c6e575b620100008116612c53575b620200008116612c39575b620400008116612c1f575b6208000016612c04575b50600012612bf5575b63ffffffff8116612bed576000905b60201c60ff91909116016001600160a01b031690565b600190612bd7565b8015611f045760001904612bc8565b6b048a170391f7dc42444e8fa26000929302901c9190612bbf565b6d2216e584f5fa1ea926041bedfe98909302811c92612bb5565b926e5d6af8dedb81196699c329225ee60402811c92612baa565b926f09aa508b5b7a84e1c677de54f3e99bc902811c92612b9f565b926f31be135f97d08fd981231505542fcfa602811c92612b94565b926f70d869a156d2a1b890bb3df62baf32f702811c92612b8a565b926fa9f746462d870fdf8a65dc1f90e061e502811c92612b80565b926fd097f3bdfd2022b8845ad8f792aa582502811c92612b76565b926fe7159475a2c29b7443b29c7fa6e889d902811c92612b6c565b926ff3392b0822b70005940c7a398e4b70f302811c92612b62565b926ff987a7253ac413176f2b074cf7815e5402811c92612b58565b926ffcbe86c7900a88aedcffc83b479aa3a402811c92612b4e565b926ffe5dee046a99a2a811c461f1969c305302811c92612b44565b916fff2ea16466c96a3843ec78b326b528610260801c91612b39565b916fff973b41fa98c081472e6896dfb254c00260801c91612b30565b916fffcb9843d60f6159c9db58835c9266440260801c91612b27565b916fffe5caca7e10e4e61c3624eaa0941cd00260801c91612b1e565b916ffff2e50f5f656932ef12357cf3c7fdcc0260801c91612b15565b916ffff97272373d413259a46990580e213a0260801c91612b0c565b6001600160881b03600160801b612b01565b6040516315e4079d60e11b8152600490fd5b80612ad4565b9093926000929091836001600160a01b0380841681891611612ea2575b828116908881168211612e6f5750505050612e6c9293946140a3565b91565b909192949550831611600014612e96575090612e9083611f019493836140a3565b94614071565b94611f01939250614071565b969296612e50565b6000198282099082810292838084109303928084039314612ee657600160601b91838311156102b9570990828211900360a01b910360601c1790565b50505060601c90565b90600160601b90600019828409928060601b92838086109503948086039514612f6b57848311156102b95782910981806000031680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b5050809250156102b9570490565b916000198284099282810292838086109503948086039514612f6b57848311156102b95782910981806000031680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b6000549062ffffff808216908360181c16811461309557620f42401061302a5765ffffff0000009060181b169065ffffff000000191617600055565b60405162461bcd60e51b815260206004820152603c60248201527f47616e64616c6620506f6f6c20466565204e756d657261746f72206d7573742060448201527f6265206c657373207468616e204645455f44454e4f4d494e41544f52000000006064820152608490fd5b60405162461bcd60e51b815260206004820152603560248201527f47616e64616c6620506f6f6c20466565204e756d657261746f72206d7573742060448201527462652073657420746f2061206e65772076616c756560581b6064820152608490fd5b6000549062ffffff808216908360301c1681146131bf57620f42401061313a5768ffffff0000000000009060301b169068ffffff000000000000191617600055565b60405162461bcd60e51b815260206004820152605160248201527f756e69737761705633506f6f6c536c6970706167654e756d657261746f72206d60448201527f757374206265206c657373207468616e206f7220657175616c20746f20534c49606482015270282820a3a2afa222a727a6a4a720aa27a960791b608482015260a490fd5b60405162461bcd60e51b815260206004820152603d60248201527f556e697377617020763320506f6f6c20536c697070616765204e756d6572617460448201527f6f72206d7573742062652073657420746f2061206e65772076616c75650000006064820152608490fd5b916001600160a01b038084169283156132e65716928315610ed85760009083825260008051602061416a833981519152806020526040832054918483106132b3575082847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef959360409388602097528652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b0391909116600482015260248101929092525060448101839052606490fd5b604051634b637e8f60e11b815260006004820152602490fd5b8061338c575b508061330e5750565b6007546040516323b872dd60e01b81523360048201523060248201526044810192909252602090829060649082906000906001600160a01b03165af18015610b5e576133575750565b6020813d602011613384575b8161337060209383611cad565b810103126102b9576133819061211e565b50565b3d9150613363565b6006546040516323b872dd60e01b81523360048201523060248201526044810192909252602090829060649082906000906001600160a01b03165af18015610b5e5715613305576020813d602011613404575b816133ec60209383611cad565b810103126102b9576133fd9061211e565b5038613305565b3d91506133df565b60015415613ae55761341c613e8f565b61342461212b565b613abb575b6006546040516370a0823160e01b81523060048201526001600160a01b0390911690602081602481855afa908115610b5e57600091613a89575b5015801590613a13575b6134745750565b6040516370a0823160e01b815230600482015290602082602481845afa918215610b5e576000926139df575b506007546040516370a0823160e01b81523060048201526001600160a01b0390911691602082602481865afa918215610b5e576000926139ab575b506134e4611f1a565b939094808611806139a2575b1561396457505060075460065461352195506001600160a01b039182169491169261351b92506121d5565b91613f1e565b600154156136f35760405160c081018181106001600160401b0382111761181c5760405260208101906000825260408101916000835260608201916000835260808101926000845260a08201936000855260015483526024602060018060a01b0360065416604051928380926370a0823160e01b82523060048301525afa908115610b5e576000916136c1575b5084526007546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa908115610b5e57600091613686575b509160609560009260c49594895283835283815242825260018060a01b036004541692604051998a98899763219f5d1760e01b89525160048901525160248801525160448701525160648601525160848501525160a48401525af18015610b5e576136545750565b6060813d60601161367e575b8161366d60609383611cad565b810103126102b95761338190612434565b3d9150613660565b91939290506020823d6020116136b9575b816136a460209383611cad565b810103126102b95790519192909160606135ec565b3d9150613697565b90506020813d6020116136eb575b816136dc60209383611cad565b810103126102b95751386135ae565b3d91506136cf565b60405161016081018181106001600160401b0382111761181c57604052600060a0820152600060c0820152600060e082015260006101008201526000610120820152600061014082015260018060a01b03600654168082526024602060018060a01b036007541692838286015260005462ffffff811660408701528060601c60020b606087015260781c60020b6080860152604051928380926370a0823160e01b82523060048301525afa908115610b5e57600091613931575b5060a08301526040516370a0823160e01b815230600482015290602090829060249082905afa908115610b5e576000916138ff575b5060c08201908152600060e0830181815261010084018281523061012086019081524261014087019081526004805460408051634418b22b60e11b81528a516001600160a01b039081169482019490945260208b015184166024820152908a015162ffffff16604482015260608a0151600290810b60648301526080808c015190910b608483015260a0909a015160a4820152975160c4890152945160e4880152925161010487015290518216610124860152516101448501529293928492610164928492165af1908115610b5e576000916138bf575b50600155565b90506080813d6080116138f7575b816138da60809383611cad565b810103126102b9576138f0602082519201612434565b50386138b9565b3d91506138cd565b90506020813d602011613929575b8161391a60209383611cad565b810103126102b95751386137e2565b3d915061390d565b90506020813d60201161395c575b8161394c60209383611cad565b810103126102b9575160246137ad565b3d915061393f565b919390928286109182613998575b5050613982575b50505050613521565b61398f9361351b916121d5565b38808080613979565b1190503880613972565b508385106134f0565b90916020823d6020116139d7575b816139c660209383611cad565b810103126128a557505190386134db565b3d91506139b9565b90916020823d602011613a0b575b816139fa60209383611cad565b810103126128a557505190386134a0565b3d91506139ed565b506007546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa908115610b5e57600091613a57575b50151561346d565b90506020813d602011613a81575b81613a7260209383611cad565b810103126102b9575138613a4f565b3d9150613a65565b90506020813d602011613ab3575b81613aa460209383611cad565b810103126102b9575138613463565b3d9150613a97565b613acb613ac66124f5565b613dbe565b613ad3613e8f565b6000600155613ae0614038565b613429565b613aed612322565b61342957613ae0614038565b6001600160a01b0390808216906401000276a382101580613d8b575b15613d7957640100000000600160c01b039060201b16806001600160801b03811160071b9181831c926001600160401b03841160061b93841c9363ffffffff851160051b94851c9461ffff861160041b95861c60ff9687821160031b91821c92600f841160021b93841c94600160038711811b96871c119617171717171717916080831015600014613d6d5750607e1982011c5b8002607f928392828493841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c80029081881c82881c1c80029283891c84891c1c800294858a1c868a1c1c800296878b1c888b1c1c800298898c1c8a8c1c1c80029a8b8d1c8c821c1c8002809d1c8d821c1c8002809e81901c90821c1c80029e8f80911c911c1c800260cd1c6604000000000000169d60cc1c6608000000000000169c60cb1c6610000000000000169b60ca1c6620000000000000169a60c91c6640000000000000169960c81c6680000000000000169860c71c670100000000000000169760c61c670200000000000000169660c51c670400000000000000169560c41c670800000000000000169460c31c671000000000000000169360c21c672000000000000000169260c11c674000000000000000169160c01c6780000000000000001690607f190160401b1717171717171717171717171717693627a301d71055774c8502906f028f6481ab7f045a5af012a19d003aa919820160801d60020b916fdb2df09e81959a81455e260799a0632f0160801d60020b92838314600014613d55575050905090565b613d5e84612ac2565b1611613d68575090565b905090565b905081607f031b613ba9565b6040516324c070df60e11b8152600490fd5b5073fffd8963efd1fc6a506488495d951d5263988d268210613b15565b91908260409103126102b9576020825192015190565b604090815160a08101908082106001600160401b0383111761181c578391825260a46020820191600084820160608301608084019060015485526001600160801b03809916875283835283815242825260018060a01b0360045416928851998a988997630624e65f60e11b8952516004890152511660248701525160448601525160648501525160848401525af18015613e8457613e5a575050565b81613e7992903d10613e7d575b613e718183611cad565b810190613da8565b5050565b503d613e67565b82513d6000823e3d90fd5b60408051608081018181106001600160401b0382111761181c57825281602082016084828401936000606082019560015483523085526001600160801b0380825280885260018060a01b03978189600454169389519a8b998a9863fc6f786560e01b8a525160048a01525116602488015251166044860152511660648401525af18015613e8457613e5a575050565b613f298383836128b0565b916040519261010084018481106001600160401b0382111761181c5760409081526001600160a01b039384168552918316602085019081526000805462ffffff90811687860190815230606089019081524260808a0190815260a08a019a8b5260c08a0196875260e08a01858152600354985163414bf38960e01b81529a518a1660048c01529551891660248b015291519092166044890152905186166064880152516084870152955160a4860152905160c485015251821660e48401528391839116815a9361010492602095f1801561402d57614005575050565b602090813d8311614026575b61401b8183611cad565b810103126128a55750565b503d614011565b6040513d84823e3d90fd5b61404061222c565b906000549060601b62ffffff60601b169162ffffff60781b9060781b169065ffffffffffff60601b19161717600055565b611f0192916001600160801b03916001600160a01b03918281168383161161409d575b03169116612eaa565b90614094565b611f019290916001600160a01b0391828216838516116140f2575b6140ea91838116919085900384169060601b6fffffffffffffffffffffffffffffffff60601b16612f79565b911690611fe5565b9092906140be565b60ff60008051602061420a8339815191525460401c161561411757565b604051631afcd79f60e31b8152600490fdfe2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0352c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace049016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0246a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aaf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a26469706673582212200f443e9630d93fbfc0448173cb5f62788178a4b86e1a98d2ccc79c50798bd26a64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8062862a4314611c0357806302ba214214611bda57806302f52f7f14611bb657806306fdde0314611b12578063071ab48914611af7578063095ea7b314611a765780630b93fb8614611a4f57806318160ddd14611a245780631a534b79146119e45780631c418996146119b05780631da022d6146110a857806323b872dd14610fd957806323bc093814610fbe5780632ce2dcf914610daa578063313ce56714610d8e5780633999d1f214610d655780633c1b890614610d3f5780634305037f14610d24578063435254d214610d0057806348a223d714610cd35780635245da5614610c8f5780635282e18c14610907578063591ad7c5146108e25780635e774c2f146108b957806361ad110514610896578063630fea1c1461087b57806363f676c814610808578063685c26d8146107dc5780636e829d35146107c15780636f26a7101461079857806370a0823114610751578063715018a6146106e757806371aff2a9146106cc5780637a39dec0146106a65780637d7c2a1c1461068d5780637db3fd69146106725780638a1b2b7b146106495780638da5cb5b1461061357806395d89b41146105315780639b2cf69b14610506578063a9059cbb146104d5578063afe17b00146104ba578063b1f8f13b1461048d578063b213ffbb14610464578063ba94a3151461043b578063bbb37017146102e7578063c1b70b751461040d578063c2f6d34a146103e4578063c59ca7e5146103be578063c6d2c20e14610392578063ccbfc16c14610379578063dd62ed3e14610330578063e53f2d1714610315578063f2fde38b146102ec578063f4e1fc41146102e7578063fc518bff146102be5763fce36a4b1461028e57600080fd5b346102b95760203660031901126102b9576102b76102aa611c26565b6102b26129a1565b612fee565b005b600080fd5b346102b95760003660031901126102b95760206001546102df811515612362565b604051908152f35b611d59565b346102b95760203660031901126102b9576102b7610308611c81565b6103106129a1565b61292d565b346102b95760003660031901126102b95760206102df6128dd565b346102b95760403660031901126102b957610349611c81565b61035a610354611c97565b91612594565b9060018060a01b03166000526020526020604060002054604051908152f35b346102b95760206102df61038c36611d24565b916128b0565b346102b95760003660031901126102b95760206102df6103b06126fa565b6103b86128dd565b9061217c565b346102b95760003660031901126102b957602062ffffff60005460181c16604051908152f35b346102b95760003660031901126102b9576003546040516001600160a01b039091168152602090f35b346102b95760003660031901126102b957602061043061042b6127e9565b613af9565b6040519060020b8152f35b346102b95760003660031901126102b9576006546040516001600160a01b039091168152602090f35b346102b95760003660031901126102b9576002546040516001600160a01b039091168152602090f35b346102b95760003660031901126102b95760206104a86127e9565b6040516001600160a01b039091168152f35b346102b95760003660031901126102b95760206102df6126fa565b346102b95760403660031901126102b9576104fb6104f1611c81565b602435903361322a565b602060405160018152f35b346102b95760403660031901126102b95760243580151581036102b9576102df6020916004356126b8565b346102b95760003660031901126102b957604051600060008051602061418a83398151915280549061056282611e7e565b808552916020916001918281169081156105e6575060011461059f575b61059b8661058f81880382611cad565b60405191829182611c38565b0390f35b600090815293506000805160206141ea8339815191525b8385106105d35750505050810160200161058f8261059b8561057f565b80548686018401529382019381016105b6565b905086955061059b9693506020925061058f94915060ff191682840152151560051b82010192938561057f565b346102b95760003660031901126102b9576000805160206141aa833981519152546040516001600160a01b039091168152602090f35b346102b95760203660031901126102b9576102b7610665611c26565b61066d6129a1565b6130f8565b346102b95760003660031901126102b9576020610430612643565b346102b95760003660031901126102b9576102b761340c565b346102b95760003660031901126102b957602062ffffff60005460301c16604051908152f35b346102b95760003660031901126102b95760206104306125cd565b346102b95760003660031901126102b9576107006129a1565b6000805160206141aa83398151915280546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346102b95760203660031901126102b9576001600160a01b03610772611c81565b1660005260008051602061416a8339815191526020526020604060002054604051908152f35b346102b95760003660031901126102b9576007546040516001600160a01b039091168152602090f35b346102b95760003660031901126102b95760206102df61256c565b346102b95760003660031901126102b95760206107f76124f5565b6001600160801b0360405191168152f35b346102b95760003660031901126102b9576000805160206141ca833981519152546108348115156120a2565b61083f6103b06126fa565b670de0b6b3a764000090818102918183041490151715610865576020916102df91611fe5565b634e487b7160e01b600052601160045260246000fd5b346102b95760003660031901126102b95760206104306123ae565b346102b95760003660031901126102b957602062ffffff60005416604051908152f35b346102b95760003660031901126102b9576004546040516001600160a01b039091168152602090f35b346102b95760003660031901126102b95760206108fd612322565b6040519015158152f35b346102b95760803660031901126102b957604435600435602482151583036102b957610937426064351015612189565b61094183836126b8565b906001600160801b0393610983610961858761095b6124f5565b16611fd2565b9561097d6000805160206141ca83398151915297885490611fe5565b16613dbe565b61098b613e8f565b15610c75576007546006546001600160a01b03918216939116905b6040516370a0823160e01b80825230600483015260209590936001600160a01b03929091878288818488165afa908115610b5e578390600092610c42575b6109ee9350613f1e565b169160405181815230600482015285818681875afa908115610b5e57600091610c15575b508211610bb9575b50610a3e620f42409162ffffff610a378160005460181c16611fa4565b1690611fd2565b0482358110610b6a5760009160448592604051948593849263a9059cbb60e01b8452336004850152888401525af18015610b5e57610b2a575b503315610b1457503360005260008051602061416a8339815191529283825260406000205493838510610aee5790836000957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef949333885284520360408620558381540390556040519283523392a36102b761340c565b60405163391434e360e21b81523360048201526024810186905260448101859052606490fd5b604051634b637e8f60e11b815260006004820152fd5b8281813d8311610b57575b610b3f8183611cad565b810103126102b957610b509061211e565b5084610a77565b503d610b35565b6040513d6000823e3d90fd5b60405162461bcd60e51b8152600481018590526022818501527f4d696e696d756d20746f6b656e20616d6f756e742063616e6e6f74206265206d604482015261195d60f21b6064820152608490fd5b905060405190815230600482015283818481855afa908115610b5e57600091610be6575b50610a3e610a1a565b90508381813d8311610c0e575b610bfd8183611cad565b810103126102b95751610a3e610bdd565b503d610bf3565b90508581813d8311610c3b575b610c2c8183611cad565b810103126102b9575188610a12565b503d610c22565b9150508782813d8311610c6e575b610c5a8183611cad565b810103126102b957826109ee9251916109e4565b503d610c50565b6006546007546001600160a01b03918216939116906109a6565b346102b95760403660031901126102b9576040610cbb610cad611c81565b610cb5611c97565b9061230b565b82516001600160a01b03928316815291166020820152f35b346102b95760003660031901126102b9576040610cee61222c565b82519160020b825260020b6020820152f35b346102b95760003660031901126102b957602060005460601c60020b604051908152f35b346102b95760003660031901126102b95760206108fd6121e2565b346102b95760003660031901126102b957602062ffffff60005460481c16604051908152f35b346102b95760003660031901126102b9576005546040516001600160a01b039091168152602090f35b346102b95760003660031901126102b957602060405160128152f35b346102b95760803660031901126102b957600435602435610dcb818361217c565b15610f6257610dde426064351015612189565b610de96103b06126fa565b15610f4957620f424091610e0b610e5492610e056103b06126fa565b926132ff565b610e4f610e3b610e2583610e206103b06126fa565b6121d5565b6000805160206141ca8339815191525490611fd2565b62ffffff610a378160005460181c16611fa4565b611fe5565b045b6044358110610ef1573315610ed8576000805160206141ca833981519152610e7f82825461217c565b90553360005260008051602061416a833981519152602052604060002081815401905560405190815260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a36102b761340c565b60405163ec442f0560e01b815260006004820152602490fd5b60405162461bcd60e51b815260206004820152602a60248201527f4d696e696d756d2067616e64616c6620746f6b656e20616d6f756e742063616e6044820152691b9bdd081899481b595d60b21b6064820152608490fd5b610f52916132ff565b69d3c21bcecceda1000000610e56565b60405162461bcd60e51b815260206004820152602e60248201527f53756d206f6620746f6b656e20616d6f756e7473206d7573742062652067726560448201526d61746572207468616e207a65726f60901b6064820152608490fd5b346102b95760003660031901126102b95760206108fd61212b565b346102b957610fe736611d24565b90610ff183612594565b33600052602052604060002054926000198403611013575b6104fb935061322a565b828410611082576001600160a01b0381161561106957331561105057826104fb9461103d83612594565b3360005260205203604060002055611009565b604051634a1406b160e11b815260006004820152602490fd5b60405163e602df0560e01b815260006004820152602490fd5b604051637dc7a0d960e11b81523360048201526024810185905260448101849052606490fd5b346102b9576101803660031901126102b9576110c2611c81565b6024356001600160401b0381116102b9576110e1903690600401611cce565b6044356001600160401b0381116102b957611100903690600401611cce565b6064356001600160a01b03811681036102b957608435916001600160a01b03831683036102b95760a435946001600160a01b03861686036102b95760c4356001600160a01b03811690036102b95760e4356001600160a01b03811690036102b95762ffffff9081610104351661010435036102b957610124359282841684036102b95782610144351661014435036102b95782610164351661016435036102b95760008051602061420a83398151915254966001600160401b03881615806119a2575b60016001600160401b038a16149081611998575b15908161198f575b5061197d5760016001600160401b031989161760008051602061420a8339815191525560ff8860401c1615611950575b6112176140fa565b61121f6140fa565b6112288361292d565b6112306140fa565b6112386140fa565b8051906001600160401b03821161181c57819061126360008051602061414a83398151915254611e7e565b601f81116118cf575b50602090601f831160011461183d57600092611832575b50508160011b916000199060031b1c19161760008051602061414a833981519152555b8051906001600160401b03821161181c576112cf60008051602061418a83398151915254611e7e565b601f81116117a6575b50602090601f83116001146117125761132093929160009183611707575b50508160011b916000199060031b1c19161760008051602061418a833981519152556103106129a1565b6000805462ffffff1916929091169182179055604051630b4c774160e11b815260c4356001600160a01b03908116600483015260e435811660248301526044820192909252906020908290606490829086165afa908115610b5e576000916116cd575b50600580546001600160a01b0319166001600160a01b039290921691821790551561169257600280546001600160a01b03199081166001600160a01b0393841617909155600380548216848416179055600480549091169185169190911790556113ef61016435612fee565b6113fb610104356130f8565b611407610144356129da565b61141560e43560c43561230b565b600780546001600160a01b03199081166001600160a01b039384161790915560068054909116928216928317905560405163095ea7b360e01b8082529184166004820152600019602482018190529591939192602090829060449082906000905af18015610b5e57611659575b506006546040518481526001600160a01b03848116600483015260248201889052909160209183916044918391600091165af18015610b5e5761161a575b506007546040518481526001600160a01b039283166004820152602481018790529160209183916044918391600091165af18015610b5e576115db575b506044602092600060018060a01b03600754166040519788958694855260018060a01b0316600485015260248401525af18015610b5e576115a1575b60ff915060401c161561154857005b68ff00000000000000001960008051602061420a833981519152541660008051602061420a833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b6020823d6020116115d3575b816115ba60209383611cad565b810103126102b9576115cd60ff9261211e565b50611539565b3d91506115ad565b6020813d602011611612575b816115f460209383611cad565b810103126102b95760209261160a60449261211e565b5092506114fd565b3d91506115e7565b6020813d602011611651575b8161163360209383611cad565b810103126102b95760009161164960209261211e565b5091506114c0565b3d9150611626565b6020813d60201161168a575b8161167260209383611cad565b810103126102b9576116839061211e565b5085611482565b3d9150611665565b60405162461bcd60e51b8152602060048201526013602482015272141bdbdb08191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b90506020813d6020116116ff575b816116e860209383611cad565b810103126102b9576116f99061210a565b85611383565b3d91506116db565b015190508a806112f6565b9060008051602061418a8339815191526000526000805160206141ea8339815191529160005b601f198516811061178e57509183916001936113209695601f19811610611775575b505050811b0160008051602061418a83398151915255610308565b015160001960f88460031b161c191690558a808061175a565b91926020600181928685015181550194019201611738565b60008051602061418a833981519152600052601f830160051c6000805160206141ea8339815191520160208410611807575b601f820160051c6000805160206141ea8339815191520181106117fb57506112d8565b600081556001016117d8565b506000805160206141ea8339815191526117d8565b634e487b7160e01b600052604160045260246000fd5b015190508a80611283565b925060008051602061414a83398151915260005260008051602061412a833981519152906000935b601f19841685106118b4576001945083601f1981161061189b575b505050811b0160008051602061414a833981519152556112a6565b015160001960f88460031b161c191690558a8080611880565b81810151835560209485019460019093019290910190611865565b90915060008051602061414a833981519152600052601f830160051c60008051602061412a833981519152016020841061193b575b908392915b601f820160051c60008051602061412a83398151915201811061192c575061126c565b60008155849350600101611909565b5060008051602061412a833981519152611904565b68ffffffffffffffffff198816680100000000000000011760008051602061420a8339815191525561120f565b60405163f92ee8a960e01b8152600490fd5b9050158a6111df565b303b1591506111d7565b5060ff8860401c16156111c3565b346102b95760003660031901126102b9576000805160206141ca833981519152546119dc8115156120a2565b61083f61256c565b346102b95760803660031901126102b9576119fd611c81565b611a05611c97565b60643562ffffff811681036102b9576020926102df9260443591612047565b346102b95760003660031901126102b95760206000805160206141ca83398151915254604051908152f35b346102b95760003660031901126102b9576040611a6a611f1a565b82519182526020820152f35b346102b95760403660031901126102b957611a8f611c81565b602435903315611069576001600160a01b031690811561105057611ab233612594565b82600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b346102b95760003660031901126102b9576020610430611ed5565b346102b95760003660031901126102b957604051600060008051602061414a833981519152805490611b4382611e7e565b808552916020916001918281169081156105e65750600114611b6f5761059b8661058f81880382611cad565b6000908152935060008051602061412a8339815191525b838510611ba35750505050810160200161058f8261059b8561057f565b8054868601840152938201938101611b86565b346102b95760003660031901126102b957602060005460781c60020b604051908152f35b346102b95760203660031901126102b9576102b7611bf6611c26565b611bfe6129a1565b6129da565b346102b95760203660031901126102b95760206108fd611c21611c26565b611d85565b6004359062ffffff821682036102b957565b6020808252825181830181905290939260005b828110611c6d57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501611c4b565b600435906001600160a01b03821682036102b957565b602435906001600160a01b03821682036102b957565b90601f801991011681019081106001600160401b0382111761181c57604052565b81601f820112156102b9578035906001600160401b03821161181c5760405192611d02601f8401601f191660200185611cad565b828452602083830101116102b957816000926020809301838601378301015290565b60609060031901126102b9576001600160a01b039060043582811681036102b9579160243590811681036102b9579060443590565b346102b95760003660031901126102b9576020604051620f42408152f35b51908160020b82036102b957565b60018060a01b03600254169062ffffff6000916020828454166024604051809781936322afcccb60e01b835260048301525afa938415611e73578394611e32575b508116908084168015611e1e57820616159283611de4575b50505090565b9091925060011b916301fffffe62fffffe841693168303611e0a57501015388080611dde565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b84526012600452602484fd5b9093506020813d602011611e6b575b81611e4e60209383611cad565b81010312611e6757611e608291611d77565b9390611dc6565b8280fd5b3d9150611e41565b6040513d85823e3d90fd5b90600182811c92168015611eae575b6020831014611e9857565b634e487b7160e01b600052602260045260246000fd5b91607f1691611e8d565b600291820b910b0390627fffff198212627fffff83131761086557565b611ee061042b6127e9565b611ee8612643565b60020b908115611f0457611f01918160020b0790611eb8565b90565b634e487b7160e01b600052601260045260246000fd5b600054611f3b611f2f8260601c60020b612ac2565b9160781c60020b612ac2565b611f73611f466126fa565b826001600160a01b038581831682821611611f9a575b611f6a828416838316612eaa565b92031691612f79565b906001600160801b0382169182036102b957611f9692611f916127e9565b612e33565b9091565b5085915084611f5c565b9062ffffff809216620f42400391821161086557565b90620f42409182810292818404149015171561086557565b8181029291811591840414171561086557565b8115611f04570490565b620f424092906001600160a01b0380806120076127e9565b16941691161015612031578161202361202d9361202893612eaa565b612eaa565b611fba565b0490565b8161204261202d9361202893612eef565b612eef565b620f4240939192906001600160a01b0380806120616127e9565b1695169116101561208a57610a376120848461202361202d9662ffffff95612eaa565b92611fa4565b610a376120848461204261202d9662ffffff95612eef565b156120a957565b60405162461bcd60e51b815260206004820152603360248201527f537570706c79206d7573742062652067726561746572207468616e207a65726f60448201527220746f2063616c63756c61746520707269636560681b6064820152608490fd5b51906001600160a01b03821682036102b957565b519081151582036102b957565b6121336121e2565b15801561215f575b80156121445790565b5060005460781c6121536125cd565b60020b9060020b141590565b5060005460601c61216e6123ae565b60020b9060020b141561213b565b9190820180921161086557565b1561219057565b60405162461bcd60e51b815260206004820152601c60248201527f5472616e73616374696f6e20646561646c696e652065787069726564000000006044820152606490fd5b9190820391821161086557565b6121ed61042b6127e9565b6121f56123ae565b9060020b809160020b13159081612217575b501561221257600190565b600090565b90506122216125cd565b60020b121538612207565b612234611ed5565b90627fffff908160005460491c1660020b61224f8185611eb8565b9360020b01918213627fffff198312176108655781620d89e7198460020b126122c657620d89e89060020b1361228157565b60405162461bcd60e51b815260206004820152601c60248201527f5469636b2075707065722069732061626f7665204d41585f5449434b000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f5469636b206c6f7765722069732062656c6f77204d494e5f5449434b000000006044820152606490fd5b6001600160a01b038281169082161015611f965791565b61232d61042b6127e9565b6000549060020b808260601c60020b13159182612351575b50501561221257600190565b60781c60020b121590503880612345565b1561236957565b60405162461bcd60e51b815260206004820152601c60248201527f4e6f206c697175696469747920706f736974696f6e206d696e746564000000006044820152606490fd5b6001546123bc811515612362565b6004805460405163133f757160e31b815291820192909252610180918290829060249082906001600160a01b03165afa918215610b5e576000926123ff57505090565b61241e9250803d1061242d575b6124168183611cad565b810190612448565b50505050505094505050505090565b503d61240c565b51906001600160801b03821682036102b957565b9190826101809103126102b95781516bffffffffffffffffffffffff811681036102b957916124796020820161210a565b916124866040830161210a565b916124936060820161210a565b91608082015162ffffff811681036102b957916124b260a08201611d77565b916124bf60c08301611d77565b916124cc60e08201612434565b916101008201519161012081015191611f016101606124ee6101408501612434565b9301612434565b6001548015612566576004805460405163133f757160e31b815291820192909252610180918290829060249082906001600160a01b03165afa918215610b5e5760009261254157505090565b6125579250803d1061242d576124168183611cad565b50505050965050505050505090565b50600090565b600654600754611f01916001600160a01b03908116911661258e6103b06126fa565b91611fef565b6001600160a01b031660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020526040902090565b6001546125db811515612362565b6004805460405163133f757160e31b815291820192909252610180918290829060249082906001600160a01b03165afa918215610b5e5760009261261e57505090565b6126349250803d1061242d576124168183611cad565b50505050509550505050505090565b60018060a01b0360025416602062ffffff600054166024604051809481936322afcccb60e01b835260048301525afa908115610b5e57600091612684575090565b90506020813d6020116126b0575b8161269f60209383611cad565b810103126102b957611f0190611d77565b3d9150612692565b90156126eb576126d5611f01916126d06103b06126fa565b611fd2565b6000805160206141ca8339815191525490611fe5565b6126d5611f01916126d061256c565b6006546040516370a0823160e01b8082523060048301526001600160a01b03928316926020908184602481885afa938415610b5e576000946127ab575b5060075416916040519081523060048201528181602481865afa918215610b5e57600092612779575b5050906103b891611f019462ffffff6000541692612047565b9080939250813d83116127a4575b6127918183611cad565b810103126102b9579051836103b8612760565b503d612787565b9093508181813d83116127d3575b6127c38183611cad565b810103126102b957519238612737565b503d6127b9565b519061ffff821682036102b957565b600554604051633850c7bd60e01b8152906001600160a01b039060e0908390600490829085165afa918215610b5e5760009261282457505090565b909160e0823d60e0116128a8575b8161283f60e09383611cad565b810103126128a557815192831683036128a55761285e60208301611d77565b5061286b604083016127da565b50612878606083016127da565b50612885608083016127da565b5060a082015160ff8116036128a5575060c06128a1910161211e565b5090565b80fd5b3d9150612832565b620f424092610a3761202d936128d36000549462ffffff94859384881692612047565b9360301c16611fa4565b611f016103b86129126128ee6127e9565b600054612903611f2f8260601c60020b612ac2565b9061290c6124f5565b92612e33565b6007546006549293926001600160a01b039081169116611fef565b6001600160a01b03908116908115612988576000805160206141aa83398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b604051631e4fbdf760e01b815260006004820152602490fd5b6000805160206141aa833981519152546001600160a01b031633036129c257565b60405163118cdaa760e01b8152336004820152602490fd5b6000549062ffffff808360481c1690821614612a67576129f981611d85565b15612a225762ffffff60481b9060481b169062ffffff60481b191617600055612a20614038565b565b60405162461bcd60e51b815260206004820152601760248201527f5469636b2072616e6765206973206e6f742076616c69640000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602d60248201527f44657369726564205469636b2052616e6765206d75737420626520736574207460448201526c6f2061206e65772076616c756560981b6064820152608490fd5b60020b6000811215612e2d5780600003905b620d89e88211612e1b576001821615612e09576001600160881b036ffffcb933bd6fad37aa2d162d1a5940015b169160028116612ded575b60048116612dd1575b60088116612db5575b60108116612d99575b60208116612d7d575b60408116612d61575b608090818116612d46575b6101008116612d2b575b6102008116612d10575b6104008116612cf5575b6108008116612cda575b6110008116612cbf575b6120008116612ca4575b6140008116612c89575b6180008116612c6e575b620100008116612c53575b620200008116612c39575b620400008116612c1f575b6208000016612c04575b50600012612bf5575b63ffffffff8116612bed576000905b60201c60ff91909116016001600160a01b031690565b600190612bd7565b8015611f045760001904612bc8565b6b048a170391f7dc42444e8fa26000929302901c9190612bbf565b6d2216e584f5fa1ea926041bedfe98909302811c92612bb5565b926e5d6af8dedb81196699c329225ee60402811c92612baa565b926f09aa508b5b7a84e1c677de54f3e99bc902811c92612b9f565b926f31be135f97d08fd981231505542fcfa602811c92612b94565b926f70d869a156d2a1b890bb3df62baf32f702811c92612b8a565b926fa9f746462d870fdf8a65dc1f90e061e502811c92612b80565b926fd097f3bdfd2022b8845ad8f792aa582502811c92612b76565b926fe7159475a2c29b7443b29c7fa6e889d902811c92612b6c565b926ff3392b0822b70005940c7a398e4b70f302811c92612b62565b926ff987a7253ac413176f2b074cf7815e5402811c92612b58565b926ffcbe86c7900a88aedcffc83b479aa3a402811c92612b4e565b926ffe5dee046a99a2a811c461f1969c305302811c92612b44565b916fff2ea16466c96a3843ec78b326b528610260801c91612b39565b916fff973b41fa98c081472e6896dfb254c00260801c91612b30565b916fffcb9843d60f6159c9db58835c9266440260801c91612b27565b916fffe5caca7e10e4e61c3624eaa0941cd00260801c91612b1e565b916ffff2e50f5f656932ef12357cf3c7fdcc0260801c91612b15565b916ffff97272373d413259a46990580e213a0260801c91612b0c565b6001600160881b03600160801b612b01565b6040516315e4079d60e11b8152600490fd5b80612ad4565b9093926000929091836001600160a01b0380841681891611612ea2575b828116908881168211612e6f5750505050612e6c9293946140a3565b91565b909192949550831611600014612e96575090612e9083611f019493836140a3565b94614071565b94611f01939250614071565b969296612e50565b6000198282099082810292838084109303928084039314612ee657600160601b91838311156102b9570990828211900360a01b910360601c1790565b50505060601c90565b90600160601b90600019828409928060601b92838086109503948086039514612f6b57848311156102b95782910981806000031680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b5050809250156102b9570490565b916000198284099282810292838086109503948086039514612f6b57848311156102b95782910981806000031680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b6000549062ffffff808216908360181c16811461309557620f42401061302a5765ffffff0000009060181b169065ffffff000000191617600055565b60405162461bcd60e51b815260206004820152603c60248201527f47616e64616c6620506f6f6c20466565204e756d657261746f72206d7573742060448201527f6265206c657373207468616e204645455f44454e4f4d494e41544f52000000006064820152608490fd5b60405162461bcd60e51b815260206004820152603560248201527f47616e64616c6620506f6f6c20466565204e756d657261746f72206d7573742060448201527462652073657420746f2061206e65772076616c756560581b6064820152608490fd5b6000549062ffffff808216908360301c1681146131bf57620f42401061313a5768ffffff0000000000009060301b169068ffffff000000000000191617600055565b60405162461bcd60e51b815260206004820152605160248201527f756e69737761705633506f6f6c536c6970706167654e756d657261746f72206d60448201527f757374206265206c657373207468616e206f7220657175616c20746f20534c49606482015270282820a3a2afa222a727a6a4a720aa27a960791b608482015260a490fd5b60405162461bcd60e51b815260206004820152603d60248201527f556e697377617020763320506f6f6c20536c697070616765204e756d6572617460448201527f6f72206d7573742062652073657420746f2061206e65772076616c75650000006064820152608490fd5b916001600160a01b038084169283156132e65716928315610ed85760009083825260008051602061416a833981519152806020526040832054918483106132b3575082847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef959360409388602097528652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b0391909116600482015260248101929092525060448101839052606490fd5b604051634b637e8f60e11b815260006004820152602490fd5b8061338c575b508061330e5750565b6007546040516323b872dd60e01b81523360048201523060248201526044810192909252602090829060649082906000906001600160a01b03165af18015610b5e576133575750565b6020813d602011613384575b8161337060209383611cad565b810103126102b9576133819061211e565b50565b3d9150613363565b6006546040516323b872dd60e01b81523360048201523060248201526044810192909252602090829060649082906000906001600160a01b03165af18015610b5e5715613305576020813d602011613404575b816133ec60209383611cad565b810103126102b9576133fd9061211e565b5038613305565b3d91506133df565b60015415613ae55761341c613e8f565b61342461212b565b613abb575b6006546040516370a0823160e01b81523060048201526001600160a01b0390911690602081602481855afa908115610b5e57600091613a89575b5015801590613a13575b6134745750565b6040516370a0823160e01b815230600482015290602082602481845afa918215610b5e576000926139df575b506007546040516370a0823160e01b81523060048201526001600160a01b0390911691602082602481865afa918215610b5e576000926139ab575b506134e4611f1a565b939094808611806139a2575b1561396457505060075460065461352195506001600160a01b039182169491169261351b92506121d5565b91613f1e565b600154156136f35760405160c081018181106001600160401b0382111761181c5760405260208101906000825260408101916000835260608201916000835260808101926000845260a08201936000855260015483526024602060018060a01b0360065416604051928380926370a0823160e01b82523060048301525afa908115610b5e576000916136c1575b5084526007546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa908115610b5e57600091613686575b509160609560009260c49594895283835283815242825260018060a01b036004541692604051998a98899763219f5d1760e01b89525160048901525160248801525160448701525160648601525160848501525160a48401525af18015610b5e576136545750565b6060813d60601161367e575b8161366d60609383611cad565b810103126102b95761338190612434565b3d9150613660565b91939290506020823d6020116136b9575b816136a460209383611cad565b810103126102b95790519192909160606135ec565b3d9150613697565b90506020813d6020116136eb575b816136dc60209383611cad565b810103126102b95751386135ae565b3d91506136cf565b60405161016081018181106001600160401b0382111761181c57604052600060a0820152600060c0820152600060e082015260006101008201526000610120820152600061014082015260018060a01b03600654168082526024602060018060a01b036007541692838286015260005462ffffff811660408701528060601c60020b606087015260781c60020b6080860152604051928380926370a0823160e01b82523060048301525afa908115610b5e57600091613931575b5060a08301526040516370a0823160e01b815230600482015290602090829060249082905afa908115610b5e576000916138ff575b5060c08201908152600060e0830181815261010084018281523061012086019081524261014087019081526004805460408051634418b22b60e11b81528a516001600160a01b039081169482019490945260208b015184166024820152908a015162ffffff16604482015260608a0151600290810b60648301526080808c015190910b608483015260a0909a015160a4820152975160c4890152945160e4880152925161010487015290518216610124860152516101448501529293928492610164928492165af1908115610b5e576000916138bf575b50600155565b90506080813d6080116138f7575b816138da60809383611cad565b810103126102b9576138f0602082519201612434565b50386138b9565b3d91506138cd565b90506020813d602011613929575b8161391a60209383611cad565b810103126102b95751386137e2565b3d915061390d565b90506020813d60201161395c575b8161394c60209383611cad565b810103126102b9575160246137ad565b3d915061393f565b919390928286109182613998575b5050613982575b50505050613521565b61398f9361351b916121d5565b38808080613979565b1190503880613972565b508385106134f0565b90916020823d6020116139d7575b816139c660209383611cad565b810103126128a557505190386134db565b3d91506139b9565b90916020823d602011613a0b575b816139fa60209383611cad565b810103126128a557505190386134a0565b3d91506139ed565b506007546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa908115610b5e57600091613a57575b50151561346d565b90506020813d602011613a81575b81613a7260209383611cad565b810103126102b9575138613a4f565b3d9150613a65565b90506020813d602011613ab3575b81613aa460209383611cad565b810103126102b9575138613463565b3d9150613a97565b613acb613ac66124f5565b613dbe565b613ad3613e8f565b6000600155613ae0614038565b613429565b613aed612322565b61342957613ae0614038565b6001600160a01b0390808216906401000276a382101580613d8b575b15613d7957640100000000600160c01b039060201b16806001600160801b03811160071b9181831c926001600160401b03841160061b93841c9363ffffffff851160051b94851c9461ffff861160041b95861c60ff9687821160031b91821c92600f841160021b93841c94600160038711811b96871c119617171717171717916080831015600014613d6d5750607e1982011c5b8002607f928392828493841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c80029081881c82881c1c80029283891c84891c1c800294858a1c868a1c1c800296878b1c888b1c1c800298898c1c8a8c1c1c80029a8b8d1c8c821c1c8002809d1c8d821c1c8002809e81901c90821c1c80029e8f80911c911c1c800260cd1c6604000000000000169d60cc1c6608000000000000169c60cb1c6610000000000000169b60ca1c6620000000000000169a60c91c6640000000000000169960c81c6680000000000000169860c71c670100000000000000169760c61c670200000000000000169660c51c670400000000000000169560c41c670800000000000000169460c31c671000000000000000169360c21c672000000000000000169260c11c674000000000000000169160c01c6780000000000000001690607f190160401b1717171717171717171717171717693627a301d71055774c8502906f028f6481ab7f045a5af012a19d003aa919820160801d60020b916fdb2df09e81959a81455e260799a0632f0160801d60020b92838314600014613d55575050905090565b613d5e84612ac2565b1611613d68575090565b905090565b905081607f031b613ba9565b6040516324c070df60e11b8152600490fd5b5073fffd8963efd1fc6a506488495d951d5263988d268210613b15565b91908260409103126102b9576020825192015190565b604090815160a08101908082106001600160401b0383111761181c578391825260a46020820191600084820160608301608084019060015485526001600160801b03809916875283835283815242825260018060a01b0360045416928851998a988997630624e65f60e11b8952516004890152511660248701525160448601525160648501525160848401525af18015613e8457613e5a575050565b81613e7992903d10613e7d575b613e718183611cad565b810190613da8565b5050565b503d613e67565b82513d6000823e3d90fd5b60408051608081018181106001600160401b0382111761181c57825281602082016084828401936000606082019560015483523085526001600160801b0380825280885260018060a01b03978189600454169389519a8b998a9863fc6f786560e01b8a525160048a01525116602488015251166044860152511660648401525af18015613e8457613e5a575050565b613f298383836128b0565b916040519261010084018481106001600160401b0382111761181c5760409081526001600160a01b039384168552918316602085019081526000805462ffffff90811687860190815230606089019081524260808a0190815260a08a019a8b5260c08a0196875260e08a01858152600354985163414bf38960e01b81529a518a1660048c01529551891660248b015291519092166044890152905186166064880152516084870152955160a4860152905160c485015251821660e48401528391839116815a9361010492602095f1801561402d57614005575050565b602090813d8311614026575b61401b8183611cad565b810103126128a55750565b503d614011565b6040513d84823e3d90fd5b61404061222c565b906000549060601b62ffffff60601b169162ffffff60781b9060781b169065ffffffffffff60601b19161717600055565b611f0192916001600160801b03916001600160a01b03918281168383161161409d575b03169116612eaa565b90614094565b611f019290916001600160a01b0391828216838516116140f2575b6140ea91838116919085900384169060601b6fffffffffffffffffffffffffffffffff60601b16612f79565b911690611fe5565b9092906140be565b60ff60008051602061420a8339815191525460401c161561411757565b604051631afcd79f60e31b8152600490fdfe2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0352c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace049016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0246a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aaf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a26469706673582212200f443e9630d93fbfc0448173cb5f62788178a4b86e1a98d2ccc79c50798bd26a64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "buyGandalfToken(uint256,uint256,uint256,uint256)": {
        "params": {
          "deadline": "The timestamp at which the transaction will expire",
          "minGandalfTokenAmount": "The minimum amount of the Gandalf token the user is willing to receive",
          "token0Amount": "The amount of token 0 the user wants to spend to buy the Gandalf token",
          "token1Amount": "The amount of token 1 the user wants to spend to buy the Gandalf token"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "getActualTickLower()": {
        "returns": {
          "actualTickLower": "The actual tick lower of the current liquidity position"
        }
      },
      "getActualTickUpper()": {
        "returns": {
          "actualTickUpper": "The actual tick upper of the current liquidity position"
        }
      },
      "getAmountOutMinimum(address,address,uint256)": {
        "params": {
          "amountIn": "The amount of tokenIn being swapped",
          "tokenIn": "The address of the token being swapped",
          "tokenOut": "The address of the token being swapped for"
        },
        "returns": {
          "amountOutMinimum": "The minimum amount of tokenOut to use for the swap"
        }
      },
      "getCurrentPriceTick()": {
        "returns": {
          "_0": "The tick of the current price"
        }
      },
      "getCurrentPriceTickRounded()": {
        "returns": {
          "_0": "The current price tick rounded"
        }
      },
      "getDesiredReserveAmounts()": {
        "params": {
          "token0Amount": "The desired amount of token0",
          "token1Amount": "The desired amount of token1"
        }
      },
      "getDesiredTickLower()": {
        "returns": {
          "_0": "The desired tick lower"
        }
      },
      "getDesiredTickRange()": {
        "returns": {
          "_0": "The desired tick range"
        }
      },
      "getDesiredTickUpper()": {
        "returns": {
          "_0": "The desired tick upper"
        }
      },
      "getEstimatedTokenOut(address,address,uint256,uint24)": {
        "params": {
          "amountIn": "The amount of tokenIn being swapped",
          "fee": "The fee to apply to the estimated swap",
          "tokenIn": "The address of the token being swapped",
          "tokenOut": "The address of the token being swapped for"
        },
        "returns": {
          "amountOut": "The estimated amount of tokenOut that will be received from the swap"
        }
      },
      "getFeeDenominator()": {
        "returns": {
          "_0": "The fee denominator constant"
        }
      },
      "getGandalfPoolFeeNumerator()": {
        "returns": {
          "_0": "The Gandalf Pool Fee Numerator"
        }
      },
      "getGandalfTokenPriceInToken0()": {
        "returns": {
          "_0": "The price in token 0 scaled by 10^18"
        }
      },
      "getGandalfTokenPriceInToken1()": {
        "returns": {
          "_0": "The price in token 1 scaled by 10^18"
        }
      },
      "getIfLiquidityPositionNeedsUpdate()": {
        "returns": {
          "_0": "bool Indicates whether the liquidity position needs to be updated"
        }
      },
      "getLiquidityPositionLiquidityAmount()": {
        "returns": {
          "liquidityAmount": "The liquidity amount of the current liquidity position"
        }
      },
      "getLiquidityPositionTokenId()": {
        "returns": {
          "_0": "The token ID of the current liquidity position"
        }
      },
      "getLiquidityPositionValueInToken0()": {
        "returns": {
          "_0": "The liquidity position value relative to token0    "
        }
      },
      "getNewDesiredTicks()": {
        "returns": {
          "newDesiredTickLower": "The new tick lower desired for the liquidity position",
          "newDesiredTickUpper": "The new tick upper desired for the liquidity position"
        }
      },
      "getPriceInActualLiquidityRange()": {
        "returns": {
          "priceInLiquidityRange": "Returns true if the current price is within the liquidity position range"
        }
      },
      "getPriceInDesiredLiquidityRange()": {
        "returns": {
          "priceInLiquidityRange": "Returns true if the current price within the desired liquidity position range"
        }
      },
      "getReserveValueInToken0()": {
        "returns": {
          "_0": "The reserve value relative to token0"
        }
      },
      "getSlippageDenominator()": {
        "returns": {
          "_0": "The slippage denominator"
        }
      },
      "getSqrtPriceX96()": {
        "returns": {
          "sqrtPriceX96": "The current price of the Uniswap pool"
        }
      },
      "getTickSpacing()": {
        "returns": {
          "_0": "The pool tick spacing"
        }
      },
      "getToken0()": {
        "returns": {
          "_0": "The token 0 address"
        }
      },
      "getToken1()": {
        "returns": {
          "_0": "The token 1 address"
        }
      },
      "getTokenAmountToReceiveFromSell(uint256,bool)": {
        "params": {
          "gandalfTokenAmountSold": "The amount of Gandalf Token being sold",
          "receiveInToken0": "Boolean indicating whether the user wants to receive token0 or token1"
        },
        "returns": {
          "maxTokenAmountToReceive": "The max amount of the token the user could receive from sell"
        }
      },
      "getTokensSorted(address,address)": {
        "params": {
          "tokenA": "The address of the first unsorted token",
          "tokenB": "The address of the second unsorted token"
        },
        "returns": {
          "token0_": "The address of the sorted token 0",
          "token1_": "The address of the sorted token 1"
        }
      },
      "getTotalValueInToken0()": {
        "returns": {
          "_0": "The total value relative to token0"
        }
      },
      "getTotalValueInToken1()": {
        "returns": {
          "_0": "The total value relative to token0"
        }
      },
      "getUniswapV3FactoryAddress()": {
        "returns": {
          "_0": "The Uniswap v3 Factory Address"
        }
      },
      "getUniswapV3PoolAddress()": {
        "returns": {
          "_0": "The Uniswap v3 Pool Address"
        }
      },
      "getUniswapV3PoolFee()": {
        "returns": {
          "_0": "The Uniswap pool fee"
        }
      },
      "getUniswapV3PoolSlippageNumerator()": {
        "returns": {
          "_0": "The Uniswap Pool Slippage Numerator   "
        }
      },
      "getUniswapV3PositionManagerAddress()": {
        "returns": {
          "_0": "The Uniswap v3 Position Manager Address"
        }
      },
      "getUniswapV3SwapRouterAddress()": {
        "returns": {
          "_0": "The Uniswap v3 Swap Router Address"
        }
      },
      "initialize(address,string,string,address,address,address,address,address,uint24,uint24,uint24,uint24)": {
        "params": {
          "desiredTickRange_": "The initial range in ticks of the liquidity range",
          "gandalfPoolFeeNumerator_": "The fee numerator applied to all buys and sells of the gandalf token",
          "name_": "The name of this contract's ERC-20 token ",
          "owner_": "The address that ownership of the contract gets transferred to",
          "symbol_": "The symbol of this contract's ERC-20 token",
          "tokenA_": "The address of the unsorted token A of the Uniswap pool liquidity is being provided to",
          "tokenB_": "The address of the unsorted token B of the Uniswap pool liquidity is being provided to",
          "uniswapV3FactoryAddress_": "The address of the Uniswap v3 Factory contract",
          "uniswapV3PoolFee_": "The fee of the Uniswap pool liquidity is being provided to",
          "uniswapV3PoolSlippageNumerator_": "The numerator of the maximum amount of slippage to allow for swaps",
          "uniswapV3PositionManagerAddress_": "The address of the Uniswap v3 Position Manager contract",
          "uniswapV3SwapRouterAddress_": "The address of the Uniswap v3 Swap Router contract"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sellGandalfToken(uint256,uint256,bool,uint256)": {
        "params": {
          "deadline": "The timestamp at which the transaction will expire",
          "gandalfTokenAmount": "The amount of Gandalf token the user wants to sell",
          "minTokenAmountToReceive": "The minimum amount of token0 or token1 the user is willing to receive",
          "receiveInToken0": "Boolean indicating whether the user wants to receive token0 or token1"
        }
      },
      "setDesiredTickRange(uint24)": {
        "params": {
          "desiredTickRange_": "The new Desired Tick Range"
        }
      },
      "setGandalfPoolFeeNumerator(uint24)": {
        "params": {
          "gandalfPoolFeeNumerator_": "The new Gandalf Pool Fee Numerator"
        }
      },
      "setUniswapV3PoolSlippageNumerator(uint24)": {
        "params": {
          "uniswapV3PoolSlippageNumerator_": "The new Uniswap v3 Pool Slippage Numerator"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyGandalfToken(uint256,uint256,uint256,uint256)": {
        "notice": "Allows the user to buy gandalf token using any amount of token0 and token1The Amount of gandalf token the user receives represents their share of the liquidity position"
      },
      "getActualTickLower()": {
        "notice": "Returns the actual tick lower of the current liquidity position"
      },
      "getActualTickUpper()": {
        "notice": "Returns the actual tick upper of the current liquidity position"
      },
      "getAmountOutMinimum(address,address,uint256)": {
        "notice": "Gets the amount out minimum to use for a swap, according to the configured allowable slippage numerator"
      },
      "getCurrentPriceTick()": {
        "notice": "Returns the current price of the Uniswap pool represented as a tick"
      },
      "getCurrentPriceTickRounded()": {
        "notice": "Gets the current price represented as a tick, rounded according to the tick spacing"
      },
      "getDesiredReserveAmounts()": {
        "notice": "Returns the desired reserve amounts of token0 and token1 that are neededto add the maximum amount of liquidity to the current liquidity position"
      },
      "getDesiredTickLower()": {
        "notice": "Returns the desired tick lower"
      },
      "getDesiredTickRange()": {
        "notice": "Returns the desired tick range"
      },
      "getDesiredTickUpper()": {
        "notice": "Returns the desired tick upper"
      },
      "getEstimatedTokenOut(address,address,uint256,uint24)": {
        "notice": "Gets the estimated token amount out from a swap. This calculation takes into accountthe pool fee, but assumes that no slippage occurs"
      },
      "getFeeDenominator()": {
        "notice": "Returns the fee denominator constant"
      },
      "getGandalfPoolFeeNumerator()": {
        "notice": "Returns the Gandalf pool fee numerator, that gets divided by FEE_DENOMINATORto calculate the fee percentage"
      },
      "getGandalfTokenPriceInToken0()": {
        "notice": "Returns the price of the Gandalf token relative to token 0 scaled by 10^18"
      },
      "getGandalfTokenPriceInToken1()": {
        "notice": "Returns the price of the Gandalf token relative to token 1 scaled by 10^18"
      },
      "getIfLiquidityPositionNeedsUpdate()": {
        "notice": "Returns whether the liquidity position needs an updateThis can return true when the price has moved outside of the current liquidity position range,or when the desired tick range has been updated by the owner"
      },
      "getIsTickRangeValid(uint24)": {
        "notice": "Returns whether the specified tick range is valid. For the tick range to be valid, it needs to be evenlydivisible by the tick spacing, and be greater than or equal to (tickSpacing * 2)"
      },
      "getLiquidityPositionLiquidityAmount()": {
        "notice": "Returns the total liquidity amount held by the current liquidity position"
      },
      "getLiquidityPositionTokenId()": {
        "notice": "Returns the token ID of the current liquidity position"
      },
      "getLiquidityPositionValueInToken0()": {
        "notice": "Gets the value of token0 and token1 held by the liquidity position in terms of token0 value"
      },
      "getNewDesiredTicks()": {
        "notice": "Gets the desired tickLower and tickUpper based on the current price and the desiredTickRange"
      },
      "getPriceInActualLiquidityRange()": {
        "notice": "Returns whether the current Uniswap pool price is within the liquidity position range"
      },
      "getPriceInDesiredLiquidityRange()": {
        "notice": "Returns whether the current Uniswap pool price within the desired liquidity position range"
      },
      "getReserveValueInToken0()": {
        "notice": "Gets the value of token0 and token1 held by this contract in terms of token0 value"
      },
      "getSlippageDenominator()": {
        "notice": "Returns the slippage denominator used for calculating the allowable slippage percentage"
      },
      "getSqrtPriceX96()": {
        "notice": "Returns the current sqrtPriceX96 of the Uniswap pool"
      },
      "getTickSpacing()": {
        "notice": "Gets the tick spacing of the Uniswap pool"
      },
      "getToken0()": {
        "notice": "Returns the address of token 0 of the Uniswap pool"
      },
      "getToken1()": {
        "notice": "Returns the address of token 1 of the Uniswap pool"
      },
      "getTokenAmountToReceiveFromSell(uint256,bool)": {
        "notice": "Gets the estimated amount of token0 or token1 user will receive when sellingthe specified amount of Gandalf Token"
      },
      "getTokensSorted(address,address)": {
        "notice": "Takes the address of two unsorted tokens and returns the tokens sorted for use with Uniswap v3"
      },
      "getTotalValueInToken0()": {
        "notice": "Gets the total value (reserves + liquidity position) in terms of token 0 value"
      },
      "getTotalValueInToken1()": {
        "notice": "Gets the total value (reserves + liquidity position) in terms of token 0 value"
      },
      "getUniswapV3FactoryAddress()": {
        "notice": "Returns the address of the Uniswap v3 Factory Address"
      },
      "getUniswapV3PoolAddress()": {
        "notice": "Returns the Uniswap v3 Pool Address"
      },
      "getUniswapV3PoolFee()": {
        "notice": "Returns the pool fee of the Uniswap pool liquidity is being provided to"
      },
      "getUniswapV3PoolSlippageNumerator()": {
        "notice": "Returns the Gandalf pool fee numerator, that gets divided by SLIPPAGE_DENOMINATORto calculate the slippage percentage"
      },
      "getUniswapV3PositionManagerAddress()": {
        "notice": "Returns the Uniswap v3 Position Manager Address"
      },
      "getUniswapV3SwapRouterAddress()": {
        "notice": "Returns the Uniswap v3 Swap Router Address"
      },
      "rebalance()": {
        "notice": "Rebalances the liquidity position by collecting fees, moving desired liquidity range ticks if needed,Making swaps between token0 and token1 if needed, and adding to liquidity position if funds are available"
      },
      "sellGandalfToken(uint256,uint256,bool,uint256)": {
        "notice": "Allows a user to sell their gandalf tokens for their share of the liquidity positionAnd receive either token0 or token1 in return"
      },
      "setDesiredTickRange(uint24)": {
        "notice": "Allows the owner to set a new Desired Tick Range"
      },
      "setGandalfPoolFeeNumerator(uint24)": {
        "notice": "Allows the owner to set a new Gandalf Pool Fee Numerator"
      },
      "setUniswapV3PoolSlippageNumerator(uint24)": {
        "notice": "Allows the owner to set a new Uniswap v3 Pool Slippage Numerator"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2115,
        "contract": "contracts/GandalfPool.sol:GandalfPool",
        "label": "uniswapV3PoolFee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint24"
      },
      {
        "astId": 2117,
        "contract": "contracts/GandalfPool.sol:GandalfPool",
        "label": "gandalfPoolFeeNumerator",
        "offset": 3,
        "slot": "0",
        "type": "t_uint24"
      },
      {
        "astId": 2119,
        "contract": "contracts/GandalfPool.sol:GandalfPool",
        "label": "uniswapV3PoolSlippageNumerator",
        "offset": 6,
        "slot": "0",
        "type": "t_uint24"
      },
      {
        "astId": 2121,
        "contract": "contracts/GandalfPool.sol:GandalfPool",
        "label": "desiredTickRange",
        "offset": 9,
        "slot": "0",
        "type": "t_uint24"
      },
      {
        "astId": 2123,
        "contract": "contracts/GandalfPool.sol:GandalfPool",
        "label": "desiredTickLower",
        "offset": 12,
        "slot": "0",
        "type": "t_int24"
      },
      {
        "astId": 2125,
        "contract": "contracts/GandalfPool.sol:GandalfPool",
        "label": "desiredTickUpper",
        "offset": 15,
        "slot": "0",
        "type": "t_int24"
      },
      {
        "astId": 2127,
        "contract": "contracts/GandalfPool.sol:GandalfPool",
        "label": "liquidityPositionTokenId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2129,
        "contract": "contracts/GandalfPool.sol:GandalfPool",
        "label": "uniswapV3FactoryAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2131,
        "contract": "contracts/GandalfPool.sol:GandalfPool",
        "label": "uniswapV3SwapRouterAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2133,
        "contract": "contracts/GandalfPool.sol:GandalfPool",
        "label": "uniswapV3PositionManagerAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2135,
        "contract": "contracts/GandalfPool.sol:GandalfPool",
        "label": "uniswapV3PoolAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2137,
        "contract": "contracts/GandalfPool.sol:GandalfPool",
        "label": "token0",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2139,
        "contract": "contracts/GandalfPool.sol:GandalfPool",
        "label": "token1",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}